// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package legacypool

import (
	"time"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Locals            []common.Address
		NoLocals          bool
		Journal           string
		Rejournal         time.Duration
		PriceLimit        uint64
		PriceBump         uint64
		AccountSlots      uint64
		GlobalSlots       uint64
		AccountQueue      uint64
		GlobalQueue       uint64
		OverflowPoolSlots uint64
		Lifetime          time.Duration
		ReannounceTime    time.Duration
	}
	var enc Config
	enc.Locals = c.Locals
	enc.NoLocals = c.NoLocals
	enc.Journal = c.Journal
	enc.Rejournal = c.Rejournal
	enc.PriceLimit = c.PriceLimit
	enc.PriceBump = c.PriceBump
	enc.AccountSlots = c.AccountSlots
	enc.GlobalSlots = c.GlobalSlots
	enc.AccountQueue = c.AccountQueue
	enc.GlobalQueue = c.GlobalQueue
	enc.OverflowPoolSlots = c.OverflowPoolSlots
	enc.Lifetime = c.Lifetime
	enc.ReannounceTime = c.ReannounceTime
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Locals            []common.Address
		NoLocals          *bool
		Journal           *string
		Rejournal         *time.Duration
		PriceLimit        *uint64
		PriceBump         *uint64
		AccountSlots      *uint64
		GlobalSlots       *uint64
		AccountQueue      *uint64
		GlobalQueue       *uint64
		OverflowPoolSlots *uint64
		Lifetime          *time.Duration
		ReannounceTime    *time.Duration
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Locals != nil {
		c.Locals = dec.Locals
	}
	if dec.NoLocals != nil {
		c.NoLocals = *dec.NoLocals
	}
	if dec.Journal != nil {
		c.Journal = *dec.Journal
	}
	if dec.Rejournal != nil {
		c.Rejournal = *dec.Rejournal
	}
	if dec.PriceLimit != nil {
		c.PriceLimit = *dec.PriceLimit
	}
	if dec.PriceBump != nil {
		c.PriceBump = *dec.PriceBump
	}
	if dec.AccountSlots != nil {
		c.AccountSlots = *dec.AccountSlots
	}
	if dec.GlobalSlots != nil {
		c.GlobalSlots = *dec.GlobalSlots
	}
	if dec.AccountQueue != nil {
		c.AccountQueue = *dec.AccountQueue
	}
	if dec.GlobalQueue != nil {
		c.GlobalQueue = *dec.GlobalQueue
	}
	if dec.OverflowPoolSlots != nil {
		c.OverflowPoolSlots = *dec.OverflowPoolSlots
	}
	if dec.Lifetime != nil {
		c.Lifetime = *dec.Lifetime
	}
	if dec.ReannounceTime != nil {
		c.ReannounceTime = *dec.ReannounceTime
	}
	return nil
}
