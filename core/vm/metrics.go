package vm

import "github.com/ethereum/go-ethereum/metrics"

var (
	opcodeCount                                    = metrics.NewRegisteredCounter("evm/opcodeCount", nil)
	andSwap1PopSwap2Swap1                          = metrics.NewRegisteredCounter("evm/opAndSwap1PopSwap2Swap1", nil)
	swap2Swap1PopJump                              = metrics.NewRegisteredCounter("evm/opSwap2Swap1PopJump", nil)
	swap1PopSwap2Swap1                             = metrics.NewRegisteredCounter("evm/opSwap1PopSwap2Swap1", nil)
	popSwap2Swap1Pop                               = metrics.NewRegisteredCounter("evm/opPopSwap2Swap1Pop", nil)
	push2Jump                                      = metrics.NewRegisteredCounter("evm/opPush2Jump", nil)
	push2JumpI                                     = metrics.NewRegisteredCounter("evm/opPush2JumpI", nil)
	push1Push1                                     = metrics.NewRegisteredCounter("evm/opPush1Push1", nil)
	push1Add                                       = metrics.NewRegisteredCounter("evm/opPush1Add", nil)
	push1Shl                                       = metrics.NewRegisteredCounter("evm/opPush1Shl", nil)
	push1Dup1                                      = metrics.NewRegisteredCounter("evm/opPush1Dup1", nil)
	swap1Pop                                       = metrics.NewRegisteredCounter("evm/opSwap1Pop", nil)
	popJump                                        = metrics.NewRegisteredCounter("evm/opPopJump", nil)
	pop2                                           = metrics.NewRegisteredCounter("evm/opPop2", nil)
	swap2Swap1                                     = metrics.NewRegisteredCounter("evm/opSwap2Swap1", nil)
	swap2Pop                                       = metrics.NewRegisteredCounter("evm/opSwap2Pop", nil)
	dup2LT                                         = metrics.NewRegisteredCounter("evm/opDup2LT", nil)
	jumpIfZero                                     = metrics.NewRegisteredCounter("evm/opJumpIfZero", nil)
	isZeroPush2                                    = metrics.NewRegisteredCounter("evm/opIsZeroPush2", nil)
	dup2MStorePush1Add                             = metrics.NewRegisteredCounter("evm/opDup2MStorePush1Add", nil)
	dup1Push4EqPush2                               = metrics.NewRegisteredCounter("evm/opDup1Push4EqPush2", nil)
	push1CalldataloadPush1ShrDup1Push4GtPush2      = metrics.NewRegisteredCounter("evm/opPush1CalldataloadPush1ShrDup1Push4GtPush2", nil)
	push1Push1Push1SHLSub                          = metrics.NewRegisteredCounter("evm/opPush1Push1Push1SHLSub", nil)
	andDup2AddSwap1Dup2LT                          = metrics.NewRegisteredCounter("evm/opAndDup2AddSwap1Dup2LT", nil)
	swap1Push1Dup1NotSwap2AddAndDup2AddSwap1Dup2LT = metrics.NewRegisteredCounter("evm/opSwap1Push1Dup1NotSwap2AddAndDup2AddSwap1Dup2LT", nil)
)
