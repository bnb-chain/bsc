// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package vm

import (
	"fmt"
	"os"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

func PathExists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return false, err
}

func TestShortcutGenerator(t *testing.T) {
	// 测试合约地址
	contractAddr := common.HexToAddress("0x1234567890123456789012345678901234567890")

	// 测试opcode序列 - 包含transfer函数选择器
	// 这是一个简化的ERC20 transfer函数opcode序列
	opcodes := []byte{
		// 函数选择器部分
		0x63, 0xa9, 0x05, 0x9c, 0xbb, // PUSH4 0xa9059cbb (transfer函数选择器)
		0x80,                         // DUP1
		0x63, 0xff, 0xff, 0xff, 0xff, // PUSH4 0xffffffff
		0x16,             // AND
		0x14,             // EQ
		0x61, 0x00, 0x20, // PUSH2 0x0020 (跳转到PC=32)
		0x57, // JUMPI

		// 其他函数选择器
		0x63, 0x23, 0xb8, 0x72, 0xdd, // PUSH4 0x23b872dd (transferFrom函数选择器)
		0x80,                         // DUP1
		0x63, 0xff, 0xff, 0xff, 0xff, // PUSH4 0xffffffff
		0x16,             // AND
		0x14,             // EQ
		0x61, 0x00, 0x40, // PUSH2 0x0040 (跳转到PC=64)
		0x57, // JUMPI

		// 一些填充字节
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// transfer函数体 (PC=32)
		0x60, 0x04, // PUSH1 0x04
		0x35,       // CALLDATALOAD
		0x60, 0x24, // PUSH1 0x24
		0x35,       // CALLDATALOAD
		0x60, 0x00, // PUSH1 0x00
		0x52,       // MSTORE
		0x60, 0x20, // PUSH1 0x20
		0x60, 0x00, // PUSH1 0x00
		0xf3, // RETURN

		// 填充字节
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// transferFrom函数体 (PC=64)
		0x60, 0x04, // PUSH1 0x04
		0x35,       // CALLDATALOAD
		0x60, 0x24, // PUSH1 0x24
		0x35,       // CALLDATALOAD
		0x60, 0x44, // PUSH1 0x44
		0x35,       // CALLDATALOAD
		0x60, 0x00, // PUSH1 0x00
		0x52,       // MSTORE
		0x60, 0x20, // PUSH1 0x20
		0x60, 0x00, // PUSH1 0x00
		0xf3, // RETURN
	}

	// 创建生成器
	generator := NewShortcutGenerator(contractAddr, opcodes)

	// 生成代码
	code, err := generator.GenerateShortcutCode()
	if err != nil {
		t.Fatalf("生成Shortcut代码失败: %v", err)
	}

	// 验证生成的代码
	if code == "" {
		t.Fatal("生成的代码为空")
	}

	// 检查是否包含预期的内容
	expectedSelectors := []string{"a9059cbb", "23b872dd"}
	for _, selector := range expectedSelectors {
		if !contains(code, selector) {
			t.Errorf("生成的代码中缺少选择器: %s", selector)
		}
	}

	// 检查是否包含合约地址
	if !contains(code, contractAddr.Hex()[2:]) {
		t.Errorf("生成的代码中缺少合约地址: %s", contractAddr.Hex())
	}

	fmt.Println("生成的Shortcut代码:")
	fmt.Println(code)
}

func TestShortcutGeneratorWithComplexContract(t *testing.T) {
	// 测试更复杂的合约
	contractAddr := common.HexToAddress("0x55d398326f99059ff775485246999027b3197955")

	// 这是一个更复杂的opcode序列，包含多个函数选择器
	opcodes := []byte{
		// 函数选择器分发器
		0x63, 0x18, 0x16, 0x0d, 0xdd, // PUSH4 0x18160ddd (totalSupply)
		0x80,                         // DUP1
		0x63, 0xff, 0xff, 0xff, 0xff, // PUSH4 0xffffffff
		0x16,             // AND
		0x14,             // EQ
		0x61, 0x00, 0x30, // PUSH2 0x0030
		0x57, // JUMPI

		0x63, 0x70, 0xa0, 0x82, 0x31, // PUSH4 0x70a08231 (balanceOf)
		0x80,                         // DUP1
		0x63, 0xff, 0xff, 0xff, 0xff, // PUSH4 0xffffffff
		0x16,             // AND
		0x14,             // EQ
		0x61, 0x00, 0x50, // PUSH2 0x0050
		0x57, // JUMPI

		0x63, 0xa9, 0x05, 0x9c, 0xbb, // PUSH4 0xa9059cbb (transfer)
		0x80,                         // DUP1
		0x63, 0xff, 0xff, 0xff, 0xff, // PUSH4 0xffffffff
		0x16,             // AND
		0x14,             // EQ
		0x61, 0x00, 0x70, // PUSH2 0x0070
		0x57, // JUMPI

		// 填充字节
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// totalSupply函数体 (PC=48)
		0x60, 0x00, // PUSH1 0x00
		0x54,       // SLOAD
		0x60, 0x00, // PUSH1 0x00
		0x52,       // MSTORE
		0x60, 0x20, // PUSH1 0x20
		0x60, 0x00, // PUSH1 0x00
		0xf3, // RETURN

		// 填充字节
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// balanceOf函数体 (PC=80)
		0x60, 0x04, // PUSH1 0x04
		0x35,       // CALLDATALOAD
		0x60, 0x00, // PUSH1 0x00
		0x52,       // MSTORE
		0x60, 0x20, // PUSH1 0x20
		0x60, 0x00, // PUSH1 0x00
		0xf3, // RETURN

		// 填充字节
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// transfer函数体 (PC=112)
		0x60, 0x04, // PUSH1 0x04
		0x35,       // CALLDATALOAD
		0x60, 0x24, // PUSH1 0x24
		0x35,       // CALLDATALOAD
		0x60, 0x00, // PUSH1 0x00
		0x52,       // MSTORE
		0x60, 0x20, // PUSH1 0x20
		0x60, 0x00, // PUSH1 0x00
		0xf3, // RETURN
	}

	opcodes = hexutil.MustDecode("0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063893d20e8116100ad578063a9059cbb11610071578063a9059cbb1461035a578063b09f126614610386578063d28d88521461038e578063dd62ed3e14610396578063f2fde38b146103c45761012c565b8063893d20e8146102dd5780638da5cb5b1461030157806395d89b4114610309578063a0712d6814610311578063a457c2d71461032e5761012c565b806332424aa3116100f457806332424aa31461025c578063395093511461026457806342966c681461029057806370a08231146102ad578063715018a6146102d35761012c565b806306fdde0314610131578063095ea7b3146101ae57806318160ddd146101ee57806323b872dd14610208578063313ce5671461023e575b600080fd5b6101396103ea565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101da600480360360408110156101c457600080fd5b506001600160a01b038135169060200135610480565b604080519115158252519081900360200190f35b6101f661049d565b60408051918252519081900360200190f35b6101da6004803603606081101561021e57600080fd5b506001600160a01b038135811691602081013590911690604001356104a3565b610246610530565b6040805160ff9092168252519081900360200190f35b610246610539565b6101da6004803603604081101561027a57600080fd5b506001600160a01b038135169060200135610542565b6101da600480360360208110156102a657600080fd5b5035610596565b6101f6600480360360208110156102c357600080fd5b50356001600160a01b03166105b1565b6102db6105cc565b005b6102e5610680565b604080516001600160a01b039092168252519081900360200190f35b6102e561068f565b61013961069e565b6101da6004803603602081101561032757600080fd5b50356106ff565b6101da6004803603604081101561034457600080fd5b506001600160a01b03813516906020013561077c565b6101da6004803603604081101561037057600080fd5b506001600160a01b0381351690602001356107ea565b6101396107fe565b61013961088c565b6101f6600480360360408110156103ac57600080fd5b506001600160a01b03813581169160200135166108e7565b6102db600480360360208110156103da57600080fd5b50356001600160a01b0316610912565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b5050505050905090565b600061049461048d610988565b848461098c565b50600192915050565b60035490565b60006104b0848484610a78565b610526846104bc610988565b6105218560405180606001604052806028815260200161100e602891396001600160a01b038a166000908152600260205260408120906104fa610988565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610bd616565b61098c565b5060019392505050565b60045460ff1690565b60045460ff1681565b600061049461054f610988565b846105218560026000610560610988565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610c6d16565b60006105a96105a3610988565b83610cce565b506001919050565b6001600160a01b031660009081526001602052604090205490565b6105d4610988565b6000546001600160a01b03908116911614610636576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061068a61068f565b905090565b6000546001600160a01b031690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104765780601f1061044b57610100808354040283529160200191610476565b6000610709610988565b6000546001600160a01b0390811691161461076b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6105a9610776610988565b83610dca565b6000610494610789610988565b846105218560405180606001604052806025815260200161107f60259139600260006107b3610988565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610bd616565b60006104946107f7610988565b8484610a78565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108845780601f1061085957610100808354040283529160200191610884565b820191906000526020600020905b81548152906001019060200180831161086757829003601f168201915b505050505081565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108845780601f1061085957610100808354040283529160200191610884565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61091a610988565b6000546001600160a01b0390811691161461097c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61098581610ebc565b50565b3390565b6001600160a01b0383166109d15760405162461bcd60e51b8152600401808060200182810382526024815260200180610fc46024913960400191505060405180910390fd5b6001600160a01b038216610a165760405162461bcd60e51b81526004018080602001828103825260228152602001806110e76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610abd5760405162461bcd60e51b8152600401808060200182810382526025815260200180610f9f6025913960400191505060405180910390fd5b6001600160a01b038216610b025760405162461bcd60e51b815260040180806020018281038252602381526020018061105c6023913960400191505060405180910390fd5b610b4581604051806060016040528060268152602001611036602691396001600160a01b038616600090815260016020526040902054919063ffffffff610bd616565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610b7a908263ffffffff610c6d16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610c655760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c2a578181015183820152602001610c12565b50505050905090810190601f168015610c575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610cc7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610d135760405162461bcd60e51b81526004018080602001828103825260218152602001806110a46021913960400191505060405180910390fd5b610d56816040518060600160405280602281526020016110c5602291396001600160a01b038516600090815260016020526040902054919063ffffffff610bd616565b6001600160a01b038316600090815260016020526040902055600354610d82908263ffffffff610f5c16565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610e25576040805162461bcd60e51b815260206004820152601f60248201527f42455032303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b600354610e38908263ffffffff610c6d16565b6003556001600160a01b038216600090815260016020526040902054610e64908263ffffffff610c6d16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610f015760405162461bcd60e51b8152600401808060200182810382526026815260200180610fe86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610cc783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610bd656fe42455032303a207472616e736665722066726f6d20746865207a65726f206164647265737342455032303a20617070726f76652066726f6d20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737342455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636542455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e636542455032303a207472616e7366657220746f20746865207a65726f206164647265737342455032303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f42455032303a206275726e2066726f6d20746865207a65726f206164647265737342455032303a206275726e20616d6f756e7420657863656564732062616c616e636542455032303a20617070726f766520746f20746865207a65726f2061646472657373a265627a7a72315820cbbd570ae478f6b7abf9c9a5c8c6884cf3f64dded74f7ec3e9b6d0b41122eaff64736f6c63430005100032")

	// 生成代码
	code, err := GenerateShortcutForContract(contractAddr, opcodes)
	if err != nil {
		t.Fatalf("生成Shortcut代码失败: %v", err)
	}

	// 验证生成的代码
	expectedSelectors := []string{"18160ddd", "70a08231", "a9059cbb"}
	for _, selector := range expectedSelectors {
		if !contains(code, selector) {
			t.Errorf("生成的代码中缺少选择器: %s", selector)
		}
	}

	fmt.Println("复杂合约生成的Shortcut代码:")
	fmt.Println(code)

	path := "../opcodeCompiler/shortcut/impl/"
	//path = "./"
	fileName := "contract_" + contractAddr.String() + ".go"

	if exist, _ := PathExists(path + fileName); exist {
		t.Skipf("file %s skiped because it exists, if need recreate please delete it first", fileName)
	} else {
		f, err := os.Create(path + fileName)
		if err != nil {
			t.Errorf("failed to open file: %v", err)
		}
		defer f.Close()

		f.WriteString(code)
	}
}

// contains 检查字符串是否包含子字符串
func contains(s, substr string) bool {
	return len(s) >= len(substr) && (s == substr || len(substr) == 0 ||
		(len(s) > len(substr) && (s[:len(substr)] == substr ||
			s[len(s)-len(substr):] == substr ||
			func() bool {
				for i := 1; i <= len(s)-len(substr); i++ {
					if s[i:i+len(substr)] == substr {
						return true
					}
				}
				return false
			}())))
}

func BenchmarkShortcutGenerator(b *testing.B) {
	contractAddr := common.HexToAddress("0x1234567890123456789012345678901234567890")
	opcodes := make([]byte, 1000) // 创建一个1000字节的opcode序列

	// 填充一些测试数据
	for i := range opcodes {
		opcodes[i] = byte(i % 256)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		generator := NewShortcutGenerator(contractAddr, opcodes)
		_, err := generator.GenerateShortcutCode()
		if err != nil {
			b.Fatalf("生成失败: %v", err)
		}
	}
}
