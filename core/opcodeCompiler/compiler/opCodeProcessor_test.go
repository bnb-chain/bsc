package compiler

import (
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/vm/runtime"
	"github.com/ethereum/go-ethereum/params"
)

// simpleDisassemble converts opcodes to human-readable mnemonics
func simpleDisassemble(code []byte) []string {
	var result []string
	var pc uint64

	// Create a mapping from opcode values to their names
	opcodeNames := map[ByteCode]string{
		STOP:            "STOP",
		ADD:             "ADD",
		MUL:             "MUL",
		SUB:             "SUB",
		DIV:             "DIV",
		SDIV:            "SDIV",
		MOD:             "MOD",
		SMOD:            "SMOD",
		ADDMOD:          "ADDMOD",
		MULMOD:          "MULMOD",
		EXP:             "EXP",
		SIGNEXTEND:      "SIGNEXTEND",
		LT:              "LT",
		GT:              "GT",
		SLT:             "SLT",
		SGT:             "SGT",
		EQ:              "EQ",
		ISZERO:          "ISZERO",
		AND:             "AND",
		OR:              "OR",
		XOR:             "XOR",
		NOT:             "NOT",
		BYTE:            "BYTE",
		SHL:             "SHL",
		SHR:             "SHR",
		SAR:             "SAR",
		KECCAK256:       "KECCAK256",
		ADDRESS:         "ADDRESS",
		BALANCE:         "BALANCE",
		ORIGIN:          "ORIGIN",
		CALLER:          "CALLER",
		CALLVALUE:       "CALLVALUE",
		CALLDATALOAD:    "CALLDATALOAD",
		CALLDATASIZE:    "CALLDATASIZE",
		CALLDATACOPY:    "CALLDATACOPY",
		CODESIZE:        "CODESIZE",
		CODECOPY:        "CODECOPY",
		GASPRICE:        "GASPRICE",
		EXTCODESIZE:     "EXTCODESIZE",
		EXTCODECOPY:     "EXTCODECOPY",
		RETURNDATASIZE:  "RETURNDATASIZE",
		RETURNDATACOPY:  "RETURNDATACOPY",
		EXTCODEHASH:     "EXTCODEHASH",
		BLOCKHASH:       "BLOCKHASH",
		COINBASE:        "COINBASE",
		TIMESTAMP:       "TIMESTAMP",
		NUMBER:          "NUMBER",
		DIFFICULTY:      "DIFFICULTY",
		GASLIMIT:        "GASLIMIT",
		CHAINID:         "CHAINID",
		SELFBALANCE:     "SELFBALANCE",
		BASEFEE:         "BASEFEE",
		BLOBHASH:        "BLOBHASH",
		BLOBBASEFEE:     "BLOBBASEFEE",
		POP:             "POP",
		MLOAD:           "MLOAD",
		MSTORE:          "MSTORE",
		MSTORE8:         "MSTORE8",
		SLOAD:           "SLOAD",
		SSTORE:          "SSTORE",
		JUMP:            "JUMP",
		JUMPI:           "JUMPI",
		PC:              "PC",
		MSIZE:           "MSIZE",
		GAS:             "GAS",
		JUMPDEST:        "JUMPDEST",
		TLOAD:           "TLOAD",
		TSTORE:          "TSTORE",
		MCOPY:           "MCOPY",
		PUSH0:           "PUSH0",
		PUSH1:           "PUSH1",
		PUSH2:           "PUSH2",
		PUSH3:           "PUSH3",
		PUSH4:           "PUSH4",
		PUSH5:           "PUSH5",
		PUSH6:           "PUSH6",
		PUSH7:           "PUSH7",
		PUSH8:           "PUSH8",
		PUSH9:           "PUSH9",
		PUSH10:          "PUSH10",
		PUSH11:          "PUSH11",
		PUSH12:          "PUSH12",
		PUSH13:          "PUSH13",
		PUSH14:          "PUSH14",
		PUSH15:          "PUSH15",
		PUSH16:          "PUSH16",
		PUSH17:          "PUSH17",
		PUSH18:          "PUSH18",
		PUSH19:          "PUSH19",
		PUSH20:          "PUSH20",
		PUSH21:          "PUSH21",
		PUSH22:          "PUSH22",
		PUSH23:          "PUSH23",
		PUSH24:          "PUSH24",
		PUSH25:          "PUSH25",
		PUSH26:          "PUSH26",
		PUSH27:          "PUSH27",
		PUSH28:          "PUSH28",
		PUSH29:          "PUSH29",
		PUSH30:          "PUSH30",
		PUSH31:          "PUSH31",
		PUSH32:          "PUSH32",
		DUP1:            "DUP1",
		DUP2:            "DUP2",
		DUP3:            "DUP3",
		DUP4:            "DUP4",
		DUP5:            "DUP5",
		DUP6:            "DUP6",
		DUP7:            "DUP7",
		DUP8:            "DUP8",
		DUP9:            "DUP9",
		DUP10:           "DUP10",
		DUP11:           "DUP11",
		DUP12:           "DUP12",
		DUP13:           "DUP13",
		DUP14:           "DUP14",
		DUP15:           "DUP15",
		DUP16:           "DUP16",
		SWAP1:           "SWAP1",
		SWAP2:           "SWAP2",
		SWAP3:           "SWAP3",
		SWAP4:           "SWAP4",
		SWAP5:           "SWAP5",
		SWAP6:           "SWAP6",
		SWAP7:           "SWAP7",
		SWAP8:           "SWAP8",
		SWAP9:           "SWAP9",
		SWAP10:          "SWAP10",
		SWAP11:          "SWAP11",
		SWAP12:          "SWAP12",
		SWAP13:          "SWAP13",
		SWAP14:          "SWAP14",
		SWAP15:          "SWAP15",
		SWAP16:          "SWAP16",
		LOG0:            "LOG0",
		LOG1:            "LOG1",
		LOG2:            "LOG2",
		LOG3:            "LOG3",
		LOG4:            "LOG4",
		CREATE:          "CREATE",
		CALL:            "CALL",
		CALLCODE:        "CALLCODE",
		RETURN:          "RETURN",
		DELEGATECALL:    "DELEGATECALL",
		CREATE2:         "CREATE2",
		RETURNDATALOAD:  "RETURNDATALOAD",
		EXTCALL:         "EXTCALL",
		EXTDELEGATECALL: "EXTDELEGATECALL",
		STATICCALL:      "STATICCALL",
		EXTSTATICCALL:   "EXTSTATICCALL",
		REVERT:          "REVERT",
		INVALID:         "INVALID",
		SELFDESTRUCT:    "SELFDESTRUCT",
	}

	for pc < uint64(len(code)) {
		if pc >= uint64(len(code)) {
			break
		}

		op := ByteCode(code[pc])
		opName, exists := opcodeNames[op]
		if !exists {
			opName = fmt.Sprintf("UNKNOWN_%d", op)
		}
		line := fmt.Sprintf("%05x: %s", pc, opName)

		// Handle PUSH instructions
		if op >= PUSH1 && op <= PUSH32 {
			size := int(op - PUSH1 + 1)
			if pc+1+uint64(size) <= uint64(len(code)) {
				arg := code[pc+1 : pc+1+uint64(size)]
				line += fmt.Sprintf(" %#x", arg)
				pc += uint64(size)
			}
		}

		result = append(result, line)
		pc++
	}

	return result
}

func debugBlocks(blocks []BasicBlock) {
	fmt.Printf("Generated %d blocks:\n", len(blocks))
	for i, block := range blocks {
		fmt.Printf("Block %d: PC[%d,%d), JumpDest: %v, Opcodes: %v\n",
			i, block.StartPC, block.EndPC, block.IsJumpDest, block.Opcodes)
	}
}

func TestGenerateBasicBlocks(t *testing.T) {
	// Test case 1: Simple linear code
	code1 := []byte{
		byte(PUSH1), 0x01, // PUSH1 0x01
		byte(PUSH1), 0x02, // PUSH1 0x02
		byte(ADD),  // ADD
		byte(STOP), // STOP
	}

	blocks1 := GenerateBasicBlocks(code1)
	debugBlocks(blocks1)
	if len(blocks1) != 1 {
		t.Errorf("Expected 1 block, got %d", len(blocks1))
	}

	if blocks1[0].StartPC != 0 || blocks1[0].EndPC != 6 {
		t.Errorf("Expected block PC range [0,6), got [%d,%d)", blocks1[0].StartPC, blocks1[0].EndPC)
	}

	// Test case 2: Code with JUMPDEST
	code2 := []byte{
		byte(PUSH1), 0x01, // PUSH1 0x01
		byte(ISZERO),            // ISZERO
		byte(PUSH2), 0x00, 0x08, // PUSH2 0x0008
		byte(JUMPI),       // JUMPI
		byte(PUSH1), 0x02, // PUSH1 0x02
		byte(STOP),        // STOP
		byte(JUMPDEST),    // JUMPDEST
		byte(PUSH1), 0x03, // PUSH1 0x03
		byte(STOP), // STOP
	}

	blocks2 := GenerateBasicBlocks(code2)
	debugBlocks(blocks2)
	if len(blocks2) != 3 {
		t.Errorf("Expected 3 blocks, got %d", len(blocks2))
	}

	// First block should be from 0 to 7 (before JUMPDEST)
	if blocks2[0].StartPC != 0 || blocks2[0].EndPC != 7 {
		t.Errorf("Expected first block PC range [0,7), got [%d,%d)", blocks2[0].StartPC, blocks2[0].EndPC)
	}

	// Second block should start at 7
	if blocks2[1].StartPC != 7 {
		t.Errorf("Expected second block to start at PC 7, got %d", blocks2[1].StartPC)
	}
	// Third block should start at JUMPDEST
	if !blocks2[2].IsJumpDest {
		t.Error("Expected third block to start with JUMPDEST")
	}
	if blocks2[2].StartPC != 10 {
		t.Errorf("Expected third block to start at PC 10, got %d", blocks2[2].StartPC)
	}

	// Test case 3: Empty code
	blocks3 := GenerateBasicBlocks([]byte{})
	if blocks3 != nil {
		t.Error("Expected nil for empty code")
	}

	// Test case 4: Code with RETURN
	code4 := []byte{
		byte(PUSH1), 0x20, // PUSH1 0x20
		byte(PUSH1), 0x00, // PUSH1 0x00
		byte(RETURN), // RETURN
	}

	blocks4 := GenerateBasicBlocks(code4)
	debugBlocks(blocks4)
	if len(blocks4) != 1 {
		t.Errorf("Expected 1 block, got %d", len(blocks4))
	}

	if blocks4[0].StartPC != 0 || blocks4[0].EndPC != 5 {
		t.Errorf("Expected block PC range [0,5), got [%d,%d)", blocks4[0].StartPC, blocks4[0].EndPC)
	}
}

func TestGenerateBasicBlocksWithRealContract(t *testing.T) {
	// Test case with real contract bytecode
	hexCode := "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063893d20e8116100ad578063a9059cbb11610071578063a9059cbb1461035a578063b09f126614610386578063d28d88521461038e578063dd62ed3e14610396578063f2fde38b146103c45761012c565b8063893d20e8146102dd5780638da5cb5b1461030157806395d89b4114610309578063a0712d6814610311578063a457c2d71461032e5761012c565b806332424aa3116100f457806332424aa31461025c578063395093511461026457806342966c681461029057806370a08231146102ad578063715018a6146102d35761012c565b806306fdde0314610131578063095ea7b3146101ae57806318160ddd146101ee57806323b872dd14610208578063313ce5671461023e575b600080fd5b6101396103ea565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101da600480360360408110156101c457600080fd5b506001600160a01b038135169060200135610480565b604080519115158252519081900360200190f35b6101f661049d565b60408051918252519081900360200190f35b6101da6004803603606081101561021e57600080fd5b506001600160a01b038135811691602081013590911690604001356104a3565b610246610530565b6040805160ff9092168252519081900360200190f35b610246610539565b6101da6004803603604081101561027a57600080fd5b506001600160a01b038135169060200135610542565b6101da600480360360208110156102a657600080fd5b5035610596565b6101f6600480360360208110156102c357600080fd5b50356001600160a01b03166105b1565b6102db6105cc565b005b6102e5610680565b604080516001600160a01b039092168252519081900360200190f35b6102e561068f565b61013961069e565b6101da6004803603602081101561032757600080fd5b50356106ff565b6101da6004803603604081101561034457600080fd5b506001600160a01b03813516906020013561077c565b6101da6004803603604081101561037057600080fd5b506001600160a01b0381351690602001356107ea565b6101396107fe565b61013961088c565b6101f6600480360360408110156103ac57600080fd5b506001600160a01b03813581169160200135166108e7565b6102db600480360360208110156103da57600080fd5b50356001600160a01b0316610912565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b5050505050905090565b600061049461048d610988565b848461098c565b50600192915050565b60035490565b60006104b0848484610a78565b610526846104bc610988565b6105218560405180606001604052806028815260200161100e602891396001600160a01b038a166000908152600260205260408120906104fa610988565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610bd616565b61098c565b5060019392505050565b60045460ff1690565b60045460ff1681565b600061049461054f610988565b846105218560026000610560610988565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610c6d16565b60006105a96105a3610988565b83610cce565b506001919050565b6001600160a01b031660009081526001602052604090205490565b6105d4610988565b6000546001600160a01b03908116911614610636576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061068a61068f565b905090565b6000546001600160a01b031690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104765780601f1061044b57610100808354040283529160200191610476565b6000610709610988565b6000546001600160a01b0390811691161461076b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6105a9610776610988565b83610dca565b6000610494610789610988565b846105218560405180606001604052806025815260200161107f60259139600260006107b3610988565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610bd616565b60006104946107f7610988565b8484610a78565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108845780601f1061085957610100808354040283529160200191610884565b820191906000526020600020905b81548152906001019060200180831161086757829003601f168201915b505050505081565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108845780601f1061085957610100808354040283529160200191610884565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61091a610988565b6000546001600160a01b0390811691161461097c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61098581610ebc565b50565b3390565b6001600160a01b0383166109d15760405162461bcd60e51b8152600401808060200182810382526024815260200180610fc46024913960400191505060405180910390fd5b6001600160a01b038216610a165760405162461bcd60e51b81526004018080602001828103825260228152602001806110e76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610abd5760405162461bcd60e51b8152600401808060200182810382526025815260200180610f9f6025913960400191505060405180910390fd5b6001600160a01b038216610b025760405162461bcd60e51b815260040180806020018281038252602381526020018061105c6023913960400191505060405180910390fd5b610b4581604051806060016040528060268152602001611036602691396001600160a01b038616600090815260016020526040902054919063ffffffff610bd616565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610b7a908263ffffffff610c6d16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505050565b60008184841115610c655760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c2a578181015183820152602001610c12565b50505050905090810190601f168015610c575780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610cc7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610d135760405162461bcd60e51b81526004018080602001828103825260218152602001806110a46021913960400191505060405180910390fd5b610d56816040518060600160405280602281526020016110c5602291396001600160a01b038516600090815260016020526040902054919063ffffffff610bd616565b6001600160a01b038316600090815260016020526040902055600354610d82908263ffffffff610f5c16565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610e255760405162461bcd60e51b815260206004820152601f60248201527f42455032303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b600354610e38908263ffffffff610c6d16565b6003556001600160a01b038216600090815260016020526040902054610e64908263ffffffff610c6d16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610f015760405162461bcd60e51b8152600401808060200182810382526026815260200180610fe86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610cc783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610bd656fe42455032303a207472616e736665722066726f6d20746865207a65726f206164647265737342455032303a20617070726f76652066726f6d20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737342455032303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636542455032303a207472616e7366657220616d6f756e7420657863656564732062616c616e636542455032303a207472616e7366657220746f20746865207a65726f206164647265737342455032303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f42455032303a206275726e2066726f6d20746865207a65726f206164647265737342455032303a206275726e20616d6f756e7420657863656564732062616c616e636542455032303a20617070726f766520746f20746865207a65726f2061646472657373a265627a7a72315820cbbd570ae478f6b7abf9c9a5c8c6884cf3f64dded74f7ec3e9b6d0b41122eaff64736f6c63430005100032"

	// Remove the "0x" prefix and decode
	realCode, err := hex.DecodeString(hexCode[2:])
	if err != nil {
		t.Fatalf("Failed to decode hex string: %v", err)
	}

	originalRealCode := make([]byte, len(realCode))
	copy(originalRealCode, realCode)

	fusedRealCode, err := doCodeFusion(realCode)
	if err != nil {
		t.Fatalf("doCodeFusion failed for real contract: %v", err)
	}

	changedRealCount := countChangedOpcodes(originalRealCode, fusedRealCode)
	fmt.Printf("Real contract bytecode: %d opcodes changed out of %d total bytes (%.2f%%)\n",
		changedRealCount, len(originalRealCode), float64(changedRealCount)/float64(len(originalRealCode))*100)

	if changedRealCount > 0 {
		fmt.Printf("Fusion efficiency: %.2f%% of opcodes were fused\n",
			float64(changedRealCount)/float64(len(originalRealCode))*100)
	}

	// Print detailed analysis
	fmt.Printf("\nDetailed Analysis:\n")
	fmt.Printf("Real contract bytecode: %d opcodes changed\n", changedRealCount)

	// Verify that the fused code is still valid (no INVALID opcodes)
	for j, op := range fusedRealCode {
		if ByteCode(op) == INVALID {
			t.Errorf("Real contract has INVALID opcode at position %d", j)
		}
	}
}

func BenchmarkOpCodeFusionPerformance(b *testing.B) {
	// Example EVM bytecode sequence (can be replaced with more realistic contract code)
	code := []byte{
		byte(PUSH1), 0x01, byte(PUSH1), 0x02, byte(ADD), byte(PUSH1), 0x03, byte(MUL), byte(STOP),
	}

	// Apply fusion to get optimized code
	fusedCode, err := doCodeFusion(append([]byte{}, code...))
	if err != nil {
		b.Fatalf("doCodeFusion failed: %v", err)
	}

	cfg := &runtime.Config{
		ChainConfig: params.MainnetChainConfig,
		GasLimit:    10_000_000,
		Origin:      common.Address{},
		BlockNumber: big.NewInt(1),
	}

	b.Run("OriginalCode", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_, _, err := runtime.Execute(code, nil, cfg)
			if err != nil {
				b.Fatalf("EVM execution failed (original): %v", err)
			}
		}
	})

	b.Run("FusedCode", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_, _, err := runtime.Execute(fusedCode, nil, cfg)
			if err != nil {
				b.Fatalf("EVM execution failed (fused): %v", err)
			}
		}
	})
}

// countChangedOpcodes counts how many opcodes have been changed (replaced with NOP)
func countChangedOpcodes(original, fused []byte) int {
	if len(original) != len(fused) {
		return -1 // Different lengths, can't compare
	}

	changed := 0
	for i := 0; i < len(original); i++ {
		if original[i] != fused[i] {
			changed++
		}
	}
	return changed
}

// getOpcodeName returns the name of an opcode for debugging
func getOpcodeName(op ByteCode) string {
	names := map[ByteCode]string{
		PUSH1: "PUSH1", ADD: "ADD", ISZERO: "ISZERO", PUSH2: "PUSH2",
		JUMPI: "JUMPI", STOP: "STOP", RETURN: "RETURN", SWAP1: "SWAP1",
		POP: "POP", JUMP: "JUMP", JUMPDEST: "JUMPDEST", Nop: "NOP",
		Push1Add: "Push1Add", IsZeroPush2: "IsZeroPush2", Push2JumpI: "Push2JumpI",
		Push1Push1: "Push1Push1", Swap1Pop: "Swap1Pop", PopJump: "PopJump",
	}
	if name, exists := names[op]; exists {
		return name
	}
	return fmt.Sprintf("UNKNOWN_%d", op)
}
