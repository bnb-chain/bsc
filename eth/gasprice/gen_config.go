// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package gasprice

import (
	"math/big"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Blocks           int
		Percentile       int
		MaxHeaderHistory uint64
		MaxBlockHistory  uint64
		MaxPrice         *big.Int `toml:",omitempty"`
		IgnorePrice      *big.Int `toml:",omitempty"`
		OracleThreshold  int      `toml:",omitempty"`
	}
	var enc Config
	enc.Blocks = c.Blocks
	enc.Percentile = c.Percentile
	enc.MaxHeaderHistory = c.MaxHeaderHistory
	enc.MaxBlockHistory = c.MaxBlockHistory
	enc.MaxPrice = c.MaxPrice
	enc.IgnorePrice = c.IgnorePrice
	enc.OracleThreshold = c.OracleThreshold
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Blocks           *int
		Percentile       *int
		MaxHeaderHistory *uint64
		MaxBlockHistory  *uint64
		MaxPrice         *big.Int `toml:",omitempty"`
		IgnorePrice      *big.Int `toml:",omitempty"`
		OracleThreshold  *int     `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Blocks != nil {
		c.Blocks = *dec.Blocks
	}
	if dec.Percentile != nil {
		c.Percentile = *dec.Percentile
	}
	if dec.MaxHeaderHistory != nil {
		c.MaxHeaderHistory = *dec.MaxHeaderHistory
	}
	if dec.MaxBlockHistory != nil {
		c.MaxBlockHistory = *dec.MaxBlockHistory
	}
	if dec.MaxPrice != nil {
		c.MaxPrice = dec.MaxPrice
	}
	if dec.IgnorePrice != nil {
		c.IgnorePrice = dec.IgnorePrice
	}
	if dec.OracleThreshold != nil {
		c.OracleThreshold = *dec.OracleThreshold
	}
	return nil
}
