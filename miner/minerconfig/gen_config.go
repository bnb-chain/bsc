// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package minerconfig

import (
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Etherbase              common.Address `toml:",omitempty"`
		ExtraData              hexutil.Bytes  `toml:",omitempty"`
		DelayLeftOver          time.Duration
		GasFloor               uint64
		GasCeil                uint64
		GasPrice               *big.Int
		Recommit               time.Duration
		VoteEnable             bool
		MaxWaitProposalInSecs  uint64
		DisableVoteAttestation bool
		Mev                    MevConfig
	}
	var enc Config
	enc.Etherbase = c.Etherbase
	enc.ExtraData = c.ExtraData
	enc.DelayLeftOver = c.DelayLeftOver
	enc.GasFloor = c.GasFloor
	enc.GasCeil = c.GasCeil
	enc.GasPrice = c.GasPrice
	enc.Recommit = c.Recommit
	enc.VoteEnable = c.VoteEnable
	enc.MaxWaitProposalInSecs = c.MaxWaitProposalInSecs
	enc.DisableVoteAttestation = c.DisableVoteAttestation
	enc.Mev = c.Mev
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Etherbase              *common.Address `toml:",omitempty"`
		ExtraData              *hexutil.Bytes  `toml:",omitempty"`
		DelayLeftOver          *time.Duration
		GasFloor               *uint64
		GasCeil                *uint64
		GasPrice               *big.Int
		Recommit               *time.Duration
		VoteEnable             *bool
		MaxWaitProposalInSecs  *uint64
		DisableVoteAttestation *bool
		Mev                    *MevConfig
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Etherbase != nil {
		c.Etherbase = *dec.Etherbase
	}
	if dec.ExtraData != nil {
		c.ExtraData = *dec.ExtraData
	}
	if dec.DelayLeftOver != nil {
		c.DelayLeftOver = *dec.DelayLeftOver
	}
	if dec.GasFloor != nil {
		c.GasFloor = *dec.GasFloor
	}
	if dec.GasCeil != nil {
		c.GasCeil = *dec.GasCeil
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.GasPrice
	}
	if dec.Recommit != nil {
		c.Recommit = *dec.Recommit
	}
	if dec.VoteEnable != nil {
		c.VoteEnable = *dec.VoteEnable
	}
	if dec.MaxWaitProposalInSecs != nil {
		c.MaxWaitProposalInSecs = *dec.MaxWaitProposalInSecs
	}
	if dec.DisableVoteAttestation != nil {
		c.DisableVoteAttestation = *dec.DisableVoteAttestation
	}
	if dec.Mev != nil {
		c.Mev = *dec.Mev
	}
	return nil
}
