// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package minerconfig

import (
	"time"
)

// MarshalTOML marshals as TOML.
func (m MevConfig) MarshalTOML() (interface{}, error) {
	type MevConfig struct {
		Enabled               bool
		GreedyMergeTx         bool
		BuilderFeeCeil        string
		SentryURL             string
		Builders              []BuilderConfig
		ValidatorCommission   uint64
		BidSimulationLeftOver time.Duration
		NoInterruptLeftOver   time.Duration
		MaxBidsPerBuilder     uint32
	}
	var enc MevConfig
	enc.Enabled = m.Enabled
	enc.GreedyMergeTx = m.GreedyMergeTx
	enc.BuilderFeeCeil = m.BuilderFeeCeil
	enc.SentryURL = m.SentryURL
	enc.Builders = m.Builders
	enc.ValidatorCommission = m.ValidatorCommission
	enc.BidSimulationLeftOver = m.BidSimulationLeftOver
	enc.NoInterruptLeftOver = m.NoInterruptLeftOver
	enc.MaxBidsPerBuilder = m.MaxBidsPerBuilder
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (m *MevConfig) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type MevConfig struct {
		Enabled               *bool
		GreedyMergeTx         *bool
		BuilderFeeCeil        *string
		SentryURL             *string
		Builders              []BuilderConfig
		ValidatorCommission   *uint64
		BidSimulationLeftOver *time.Duration
		NoInterruptLeftOver   *time.Duration
		MaxBidsPerBuilder     *uint32
	}
	var dec MevConfig
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Enabled != nil {
		m.Enabled = *dec.Enabled
	}
	if dec.GreedyMergeTx != nil {
		m.GreedyMergeTx = *dec.GreedyMergeTx
	}
	if dec.BuilderFeeCeil != nil {
		m.BuilderFeeCeil = *dec.BuilderFeeCeil
	}
	if dec.SentryURL != nil {
		m.SentryURL = *dec.SentryURL
	}
	if dec.Builders != nil {
		m.Builders = dec.Builders
	}
	if dec.ValidatorCommission != nil {
		m.ValidatorCommission = *dec.ValidatorCommission
	}
	if dec.BidSimulationLeftOver != nil {
		m.BidSimulationLeftOver = *dec.BidSimulationLeftOver
	}
	if dec.NoInterruptLeftOver != nil {
		m.NoInterruptLeftOver = *dec.NoInterruptLeftOver
	}
	if dec.MaxBidsPerBuilder != nil {
		m.MaxBidsPerBuilder = *dec.MaxBidsPerBuilder
	}
	return nil
}
