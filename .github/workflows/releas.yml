# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Release

on:
  push:
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

jobs:
  build:
    name: Build Release
    strategy:
      matrix:
        go-version: [1.17.x]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      # ==============================
      #       Linux Build
      # ==============================
      - name: Build Binary for ubuntu-latest
        run: make geth

      - name: Upload Linux Build
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: ./build/bin/geth


  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set Env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v3
        # ==============================
        #       Download artifacts
        # ==============================

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: ./linux

      - name: Download Config File
        run: |
          . ./.github/release.env
          echo "mainnet.zip url: $MAINNET_FILE_URL"
          echo "testnet.zip url: $TESTNET_FILE_URL"
          curl -L $MAINNET_FILE_URL -o ./mainnet.zip
          curl -L $TESTNET_FILE_URL -o ./testnet.zip
      # ==============================
      #       Create release
      # ==============================

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            versing: ${{ env.RELEASE_VERSION}}
            git commit: ${{ github.sha }}
          draft: true
          prerelease: true

      # Check downloaded files
      - run: ls

      - name: Upload Release Asset - Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./linux/geth
          asset_name: geth_linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - MAINNET.ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./mainnet.zip
          asset_name: mainnet.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TESTNET.ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./testnet.zip
          asset_name: testnet.zip
          asset_content_type: application/zip
