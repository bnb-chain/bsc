// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.721kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x6b\x6f\xe3\x38\x92\x9f\xd3\xbf\xa2\x46\xd7\x3b\xb6\xaf\x23\xc9\xef\x38\xb6\xe5\x41\x3b\x49\xef\xe6\x80\xeb\x6d\x6c\xf7\xe0\xf6\x30\x3b\x38\x50\x62\xd9\x66\x47\x22\x35\x24\xe5\xc4\x6b\xf8\xbf\x1f\x48\x3d\x2c\x3f\x92\xe9\xc7\x2c\x0e\x97\x0f\x8e\x48\x16\xeb\xcd\xaa\x62\x49\xd3\x1f\x6e\xff\x7a\xf3\xe9\xbf\x3f\xdc\xc1\x4a\x27\xf1\xec\xd5\xd4\xfc\x83\x98\xf0\x65\xe0\x20\x77\x66\xaf\x2e\xa6\x2b\x24\x74\xf6\xea\xe2\x62\x9a\xa0\x26\x10\xad\x88\x54\xa8\x03\x27\xd3\x0b\x77\xe4\xec\x17\x56\x5a\xa7\x2e\xfe\x96\xb1\x75\xe0\xfc\xdd\xfd\xf9\xad\x7b\x23\x92\x94\x68\x16\xc6\xe8\x40\x24\xb8\x46\xae\x03\xe7\xfe\x2e\x40\xba\xc4\xda\x3e\x4e\x12\x0c\x9c\x35\xc3\xc7\x54\x48\x5d\x03\x7d\x64\x54\xaf\x02\x8a\x6b\x16\xa1\x6b\x07\x97\xc0\x38\xd3\x8c\xc4\xae\x8a\x48\x8c\x41\xc7\x99\xbd\x32\x78\x34\xd3\x31\xce\xb6\x5b\xef\x3d\xea\x47\x21\x1f\x76\xbb\x31\xbc\x23\x59\x84\x7a\xea\xe7\x6b\x16\x2c\x66\xfc\x01\x56\x12\x17\x81\x63\x98\x55\x63\xdf\x8f\x28\xff\xac\xbc\x28\x16\x19\x5d\xc4\x44\xa2\x17\x89\xc4\x27\x9f\xc9\x93\x1f\xb3\x50\xf9\xfa\x91\x69\x8d\xd2\x0d\x85\xd0\x4a\x4b\x92\xfa\x3d\xaf\xe7\x5d\xf9\x91\x52\x7e\x35\xe7\x25\x8c\x7b\x91\x52\x0e\x48\x8c\x03\x47\xe9\x4d\x8c\x6a\x85\xa8\x1d\xf0\x67\xdf\x46\x77\x21\xb8\x76\xc9\x23\x2a\x91\xa0\xdf\xf7\xae\xbc\xb6\x25\x59\x9f\x7e\x99\xaa\x21\xab\x22\xc9\x52\x0d\x4a\x46\x5f\x4c\xf7\xf3\x6f\x19\xca\x8d\xdf\xf3\x3a\x5e\xa7\x18\x58\x3a\x9f\x95\x33\x9b\xfa\x39\xc2\xd9\x77\xe1\x76\xb9\xd0\x1b\xbf\xeb\xf5\xbd\x8e\x9f\x92\xe8\x81\x2c\x91\x96\x94\xcc\x92\x57\x4e\xfe\x61\x74\x9f\xb3\xe1\xe7\x63\x13\xfe\x11\xc4\x12\x91\x20\xd7\xde\x67\xe5\x77\xbd\xce\xc8\x6b\x97\x13\xa7\xf8\x2d\x01\x63\x34\x43\xea\xc2\x5b\xa3\xd4\x2c\x22\xb1\x1b\x21\xd7\x28\x61\x6b\x66\x2f\x12\xc6\xdd\x15\xb2\xe5\x4a\x8f\xa1\xd3\x6e\xff\x69\x72\x6e\x76\xbd\xca\xa7\x29\x53\x69\x4c\x36\x63\x58\xc4\xf8\x94\x4f\x91\x98\x2d\xb9\xcb\x34\x26\x6a\x0c\x39\x66\xbb\xb0\xb3\x34\x53\x29\x96\x12\x95\x2a\x88\xa5\x42\x31\xcd\x04\x1f\x1b\x8f\x22\x9a\xad\xf1\x1c\xac\x4a\x09\x3f\xd9\x40\x42\x25\xe2\x4c\xe3\x11\x23\x61\x2c\xa2\x87\x7c\xce\x9e\xdf\xba\x10\x91\x88\x85\x1c\xc3\xe3\x8a\x15\xdb\xc0\x12\x82\x54\x62\x81\x1e\x52\x42\x29\xe3\xcb\x31\x0c\xd3\x42\x1e\x48\x88\x5c\x32\x3e\x86\xf6\x7e\xcb\xd4\x2f\xd5\x38\xf5\xf3\x50\xf5\xea\x62\x1a\x0a\xba\x31\x33\x94\xad\x81\xd1\xc0\x91\x18\x91\x54\x47\x2b\xf2\x3f\x18\xa3\xb1\x88\x31\x05\x65\x6b\x0b\x5c\x02\xe5\x91\x87\xce\x05\xdd\x38\x10\xc5\x44\xa9\xc0\x39\xb2\x8b\x8d\x5b\xf9\x8e\x02\xc0\x6c\x22\x8c\x97\x4b\x07\x6b\x52\x3c\x3a\x60\xb9\x0b\x9c\x9c\x73\x37\x14\x5a\x8b\x64\x0c\x1d\x23\x53\xb1\xe5\x08\x5f\xec\xc6\x4b\xb7\xd3\x2d\x17\x2f\xa6\xab\x4e\x89\x44\xe3\x93\x76\xad\x51\x2b\x73\x3a\xb3\x29\x2b\xf7\x2e\x08\x2c\x88\x1b\x12\xbd\x72\x80\x48\x46\xdc\x15\xa3\x14\x79\xe0\x68\x99\xa1\x91\x98\xcd\xa0\x1e\x25\xab\x20\xb9\xea\x94\x9c\xe4\x4a\x39\x7e\x3c\x92\xe9\x79\xb6\x47\x50\x3c\x88\xc5\x42\xa1\x76\x6b\x52\xd4\x80\x19\x4f\x33\xed\x2e\xa5\xc8\xd2\x6a\xfd\x62\x6a\x67\xad\x21\x32\x19\x3b\x45\x5e\xb0\x8f\x7a\x93\x16\xc2\x57\x76\x59\x08\x99\xb8\x46\xf7\x52\xc4\x0e\xa4\x31\x89\x70\x25\x62\x8a\x32\x70\xee\x2d\x9e\x8d\xc8\x24\xcc\xdf\xcf\xe1\x63\x42\xa4\x86\x9b\x15\x61\x1c\x08\xa5\xc6\x89\x3d\xcf\xab\xd1\xb5\x1e\x7d\xca\x99\x1b\x6a\xbe\x87\xba\x98\x86\x99\xd6\xa2\x02\x0c\x35\x87\x50\x73\x97\xe2\x82\x64\xb1\x06\x2a\x45\x4a\xc5\x23\x77\xb5\x58\x2e\x4d\xc6\xcb\x79\xce\x37\x39\x40\x89\x26\xc5\x52\xe0\x94\xb0\xa5\x91\x88\x4a\x45\x9a\xa5\x85\x99\xf2\x49\x7c\x4a\x09\xa7\x48\x8d\x51\x63\x85\xce\xec\xcf\x6c\x8d\x90\xa0\x11\xe9\xe2\xd8\xe2\x11\x91\xa8\xdd\x3a\xca\x13\xbb\x4f\xfd\x9c\x95\x5c\x20\x28\xfe\xa6\x59\x5c\x62\xaa\x04\x48\x90\x67\x70\x30\x72\xa5\x89\x35\x95\x2e\x00\xb6\x5b\x49\xf8\x12\xe1\x35\xa3\x4f\x97\xf0\x9a\x24\x22\xe3\x1a\xc6\x01\x78\x6f\xed\xa3\xda\xed\x0e\xc8\x00\x4c\x63\x06\xb3\x29\x79\xc9\x8f\x41\xf0\x28\x66\xd1\x43\xe0\x68\x86\x32\xd8\x6e\x0d\xf6\xdd\x6e\xa2\x36\x49\x28\xe2\xa0\x31\x7f\x3f\x6f\x4c\x54\x16\x26\x4c\x37\x5b\xce\x6c\xbb\x2d\xe8\xee\x76\x53\x9f\xcc\xa6\x7e\xcc\x66\xdb\x2d\x72\x7a\x44\x7b\xea\x67\xf1\xde\xd6\xbe\x31\xf6\xff\x37\xd3\x7f\xc0\xe5\x72\x03\x5a\x3c\x20\x57\xff\x47\xa6\xdf\x9b\x3c\x37\xc7\x25\xbc\x0e\x31\xed\xe2\x3d\x5f\x08\x6b\xf8\x79\x39\x2a\x6d\x6f\x15\x17\xb3\x2f\x36\x7a\x61\xe6\xed\xb6\xa0\xb0\xdb\x4d\xe0\xc0\xda\x15\xbd\xc2\xc9\x3e\x6a\xb9\xdb\x41\x0d\xfe\x5b\xdd\xa0\x16\xe8\xbe\x30\xfe\x1d\xc5\x74\x2d\xd2\x31\xf4\xba\xb5\x80\x7e\x2e\x34\x0e\x8f\x42\x63\xef\x2c\x70\x4a\x38\xc6\x60\x7f\x5d\x95\x90\xb8\x7c\x2e\x9c\xad\x16\xb6\x8e\x37\xb9\xa1\xcd\x5b\x05\x6b\x55\xee\x6c\x4f\x40\xac\x51\x2e\x62\xf1\x38\x06\x92\x69\x31\x81\x84\x3c\x55\xf5\x43\xaf\xdd\xae\xf3\x6d\x8a\x69\x12\xc6\x58\x24\xcd\xdf\x32\x54\x5a\x55\x41\x37\x5f\xb2\xbf\x26\xf6\x52\xe4\x0a\xe9\x91\x36\x0c\x45\xe3\x77\x16\xaa\xa6\xf1\xbd\x8e\xcf\xf1\xbe\x10\xa2\xca\xae\x75\x36\x0a\xd4\xb5\xea\xc1\x99\x4d\xb5\xdc\xc3\x5d\x4c\x35\xfd\xaa\xec\x28\x4d\xc9\xfc\x5c\x72\xcc\x03\x82\x91\x3d\x45\x94\x79\xbd\x66\x3c\x05\xec\x70\xea\x6b\xfa\x1d\x94\x4d\x20\x08\x89\xc2\x2f\x21\x6f\x2b\xa7\x3d\x79\x3b\xfc\x5e\xfa\x2b\x24\x52\x87\x48\xf4\x97\x30\xb0\xc8\x38\xad\xc9\x3f\x7f\x3f\xff\x5e\xf2\x19\x67\x6b\x94\x8a\xe9\xcd\x97\xd2\x47\xba\x67\x20\x1f\x1f\xb2\x30\xf5\xb5\x7c\xd9\xd3\xfe\x05\x47\xfb\xf7\x6a\xb5\xde\xec\x2f\xe2\x11\xa8\x40\x05\x7a\xc5\x14\x98\x4a\xeb\xa7\xa9\xbf\xea\x55\x20\xa9\x89\x89\x87\xd7\x41\x8d\x4a\x73\xd4\x5e\xa8\x22\x15\x11\x9e\x5f\x2a\xf2\x5a\xc5\x6f\x3f\x0d\x23\x1c\xd1\xb7\xdd\xd1\x5d\x77\x31\x1a\xf6\xfb\xdd\xf6\xa8\xdf\x8e\xde\x5d\xf5\xfb\x57\x7d\x7c\xb7\x18\x2c\x6e\x47\xed\xbb\xe1\x60\x3e\x72\x66\xf3\x4f\x37\x26\x0a\x5e\x7e\x25\x01\x3a\x1c\x46\xc3\x79\xff\x5d\x3b\xc4\xd1\xcd\xdd\x20\xec\x5d\xdf\x0e\xba\x77\xed\x77\xb4\xd3\xeb\xf7\xa3\xde\xe8\xfa\xba\x7b\x3d\xef\x5d\x8d\x9c\xd9\xdd\xa7\xbf\x7c\x0b\x01\x32\xea\x0d\xae\x06\xfd\xeb\xf6\xed\x15\x5d\xf4\xef\xba\xef\xfa\x57\xe1\xd5\x6d\x6f\x84\x8b\xde\xa0\x43\xba\x57\xdd\x6e\xf4\xb6\x3f\x08\xaf\x9d\xd9\xdf\xff\xf6\xe1\x5b\x08\x20\xed\xf6\x17\x51\x6f\x48\x07\x88\xdd\x4e\x07\x49\x77\x40\x46\xed\x6e\xef\x7a\x11\x8e\xa2\x7e\xb4\xa0\xa3\xf6\xa2\xd3\x45\x74\x66\xf3\x9f\x3f\xde\x7e\x0b\x85\x5e\xef\x6a\xd8\x69\xd3\xee\x55\x34\x1c\x75\xef\x7a\xfd\xab\x9b\xeb\xe8\x76\xd8\x9e\xdf\xf6\xc3\x5e\xd8\x69\x5f\xdd\x5c\xd3\x5e\x9f\xde\x52\x67\xf6\xf3\xc7\xdb\x4f\xdf\x42\x61\xd8\x1f\xf4\xfb\xd7\xc3\x6b\xa4\x57\x77\xf3\xc5\x60\xd1\x1e\xf5\x86\x57\xd7\xdd\x5e\xaf\xd7\x1d\xf4\x06\xc3\xbb\xf0\xee\xaa\x37\xba\xee\xb5\x2d\x85\x6f\xb2\xf3\xdd\xcd\x80\xde\x84\x83\xdb\x70\xd1\x9f\x77\x3a\xfd\x9b\x6b\xda\x7e\x37\x1c\xcc\xa3\x9b\xb7\x61\xff\xfa\xee\x66\xd0\x7f\x37\x7c\xdb\x1e\x0d\xaf\x9c\xd9\xed\xdb\x7b\x43\x00\x88\x44\x60\x4a\x65\x48\x81\x28\x98\xdf\x7d\xe8\xb6\xf3\x42\xc4\x9b\xfa\x69\xcd\xa3\xe1\xc6\x64\x71\xd0\x02\x96\xa8\x81\xa2\x26\x2c\x06\x12\x8a\x4c\xc3\x09\x8f\x4b\xa6\x57\x59\x68\x59\x0b\x79\xe8\x46\xa6\x32\xf7\xe7\x77\x1f\x94\x1f\xc6\x22\xf4\x13\xa2\x34\x4a\xdf\xd2\xf2\x12\xea\xcc\xec\x93\xe1\x26\xa7\x59\x23\xfa\x31\x4b\x53\x21\x35\xdc\x32\x15\x09\x49\xc7\x87\xb4\xc6\xbe\x4f\xf3\x05\x6f\xb9\x34\xa4\x2c\x25\x67\x06\x67\x66\xc1\x4a\x5b\x93\x69\xbb\x65\x0b\xf0\xfe\x56\x5e\x1b\x77\xbb\x29\x26\xb3\x4f\x2b\x84\x85\xbd\x32\x01\x53\x20\x33\xce\x19\x5f\x82\xc4\x9b\x1c\x08\x52\x29\x34\x46\xe6\x4a\x0c\x64\x49\x18\x57\x1a\x42\xa1\x95\x37\xf5\x31\x39\xa8\x4a\xce\x07\xa3\xea\xa9\xba\x9a\x96\x3d\x08\xbb\xec\xfb\xf0\xe7\x58\x84\x24\x86\xb5\x89\x9f\x61\x6c\x42\x8c\x00\x73\xed\x01\xbd\x42\x88\x32\x29\x91\x6b\x50\x9a\xe8\x4c\x81\x58\xd8\xd9\x9c\x5f\xb3\x7f\x4d\x24\x10\xad\x31\x49\x35\x04\xc5\x0d\xda\xcc\x29\x94\xeb\xa2\x2f\x60\x86\xa6\xfa\x3e\x5c\xcf\x2b\x33\xc7\xa9\x66\xca\xc2\x00\x02\xf8\xe5\xd7\x6a\xb6\x50\xd5\xe4\x55\xc1\xec\x2d\x2e\x18\x47\x20\x26\x76\xe7\x4a\xd1\x2b\xa2\x21\x92\x48\x34\x2a\x88\x62\xa1\x32\x99\xcb\x60\x6a\x4e\x30\x72\x94\x98\x4b\x9c\x66\x21\xb5\xfc\x94\x48\x9a\x2b\xa2\x56\xad\xa2\x45\x20\x51\x67\x92\xef\xd7\xca\xf9\x8b\x85\x90\xd0\x34\x08\x58\xd0\x9e\x00\x9b\x96\x78\xbd\x18\xf9\x52\xaf\x26\xc0\xde\xbc\xa9\x80\x2f\xd8\x02\x9a\x25\xc4\x2f\xec\x57\x4f\x3f\x79\x86\x0a\x04\x01\xd4\xa9\x59\x82\x05\x1e\x95\xc6\x2c\xc2\x26\xbb\x84\x4e\x6b\x52\xae\x86\x12\xc9\x43\x39\x2a\x2c\x9d\xff\xb3\xbf\xbb\x5c\x35\x54\x44\x99\x6d\x0a\x2d\x51\xdf\xe5\xdd\x88\xf9\xe6\x9e\x36\x0f\xfa\x0f\x2d\xcf\x26\x22\xaf\xe8\xa5\x40\x00\x0e\x17\x1c\x9d\x1c\x45\x6e\x84\x42\xe1\x37\x24\x8e\x43\x12\x3d\xd4\x95\x54\xb2\xbc\x2a\x60\x3c\x89\x9c\xa2\x6c\x36\x4e\x1a\x21\x8d\xcb\x52\xba\x86\x62\x1a\x1f\x70\xd3\x80\x31\x34\xb6\xdb\xba\xf3\x37\x2e\x0b\x90\xa8\xa0\x65\x60\x88\x52\x6c\xc9\x4b\xea\x39\xc4\x2e\x57\xc6\x6e\xcf\xe6\x21\x54\x9d\xc7\x65\x81\xbe\xe4\xf5\x5b\xf5\x92\xd7\x4a\x93\x97\x71\x9c\x36\x80\x9e\xd7\xb0\x41\x54\x40\x43\x00\xcb\xca\xaf\x73\xc1\x0e\x9c\xdb\x9e\xb0\x03\xf7\xce\xef\x2c\x0a\x08\x2c\x99\xd2\x90\xc9\xd8\x38\xb8\x81\xcb\xcf\x59\x75\xaa\x2c\xdc\x39\x9b\xe5\x70\x9e\x42\x4e\x9b\xff\xf1\xf1\xaf\xef\x3d\xa5\x25\xe3\x4b\xb6\xd8\x34\xb7\x99\x8c\xc7\xf0\xba\xe9\xfc\x5b\x26\x63\xa7\xf5\x4b\xfb\x57\x6f\x4d\xe2\x0c\x2f\x8b\x43\x3a\x86\xf2\x7a\x66\x4e\xf1\xd8\xfe\x9e\x44\xb2\xcb\xf2\xa4\x8e\xcb\x87\x22\x34\xed\x5a\xad\xc9\x09\xf4\xb1\x1b\x29\xd4\x4d\x03\x56\x05\xb3\x63\x95\x10\x48\x50\xaf\x04\x35\x62\x4b\x8c\x04\xe7\x18\x69\xc8\x52\xc1\x0b\x0d\x40\x2c\x94\xaa\x79\x71\x01\xf1\xac\x26\x20\x00\x8e\x8f\xf0\x5f\x18\x7e\x14\xd1\x03\xea\x66\xb3\xf9\xc8\x38\x15\x8f\x5e\x2c\x22\x62\x36\x78\x26\xf0\x8a\x48\xc4\x10\x04\x01\x14\x89\xc6\x69\xc1\x4f\xe0\x3c\x2a\x93\x72\x1c\x18\x9b\x47\xf3\xd4\x82\x37\x70\xbc\x7d\x25\x94\x86\x37\xe0\xf8\x79\xb0\x34\x17\x2f\xa9\x7d\x92\x32\xa7\x95\x3b\x72\x69\x13\xc1\x13\x54\x8a\x2c\xb1\xce\x2d\xae\x91\xeb\x2a\x46\x18\xa1\x12\xb5\x84\x00\xac\xed\x52\x22\x15\xe6\x20\x9e\xb9\x00\x94\xc1\xc2\x84\x1c\x0b\x16\x04\xc0\xb3\x38\xde\xc7\x98\x3c\xa6\x4d\xca\xe8\x71\x00\xee\xd9\xb2\x1c\x7e\x08\x02\x30\xf5\xb0\xd1\x37\xdd\xef\x34\x7e\x91\xd7\xed\x2d\xcf\x94\xe4\xfb\x1d\xad\x49\x3d\x18\x1d\x60\x43\xfa\x7b\xe8\x90\x1e\xe3\x43\xfa\x0c\x42\x7b\x4d\x7a\x09\x5f\x7e\xad\xaa\xa1\xb3\x13\xcf\x60\xe3\x59\x12\xa2\x7c\x09\x5d\x7e\xf4\x0b\x74\x56\xd5\xf7\x5c\xd7\xf6\x5e\x42\x67\xd8\x7a\x06\x3b\x4a\x29\x9e\x45\xce\x85\xde\x34\xb7\x31\xd9\x88\x4c\x8f\xa1\xa1\x45\x7a\x63\xef\x35\x8d\x4b\x30\xb4\xc6\x50\x61\xb8\xb4\xed\x9e\x31\x34\xec\xc8\xac\xb3\x04\xed\xae\x41\xbb\xdd\xbe\x84\xb2\x71\x3e\x27\xe6\x3c\xca\x0c\x77\xcf\xf0\xa3\xb2\x28\x42\xf5\xac\xf6\xbe\x88\xa3\x02\x47\xc5\x53\x31\xfe\x0e\xae\xaa\x54\x7f\xc0\x16\xfc\xf8\x23\x9c\xac\x1e\xba\xb1\xef\xc3\x7f\x12\xf9\x00\xb6\x85\x21\x71\xcd\x44\xa6\xf6\x85\x43\xc2\x94\x32\xb5\x13\x51\x40\x05\xc7\x62\xcf\xd7\x65\xed\x13\x1e\x0b\x30\x98\x41\xfb\x98\x41\x13\x29\x6b\x59\xfd\x4c\xb2\xaf\xe1\x3d\xcc\xe3\x17\xbb\x3a\xbd\x83\x9d\x2c\x41\xf8\x21\x00\xc7\xa9\x6f\x3e\x81\x30\x00\x15\xb2\x0b\x85\xfa\x53\x6e\x8b\x66\x51\xdc\x9c\x2b\x3d\x5a\x97\xd0\x6b\xb7\xdb\xad\x13\x26\x76\x7b\xf5\xbe\x4d\x53\xe4\x14\x08\xdf\xd8\xf8\x58\xe9\x96\x71\x2d\x40\x64\x26\xce\x46\x24\x86\x48\xc4\x71\x5e\x94\x16\x5b\x6d\xad\x26\x92\x44\x70\x08\xc0\xed\x4c\xce\x14\x41\x35\x4d\xd6\x44\x3b\x36\xcf\x19\xdd\x1f\x9b\xe8\x50\x67\x47\xc0\x6e\xe7\xc0\x28\x07\xf6\x3a\x6f\x98\x8b\x8a\x6f\xb6\xd7\xe8\x91\xb9\xf6\xf6\x3a\xd6\x59\x8d\xff\x1c\xcf\x9b\xce\x17\x8a\x51\x2d\xa7\x99\x5a\x35\x8f\x18\x6d\x4d\x4e\x6d\x73\xaf\x51\x12\x8d\xb6\xf5\x66\x6d\x81\x5c\x33\x89\x27\x26\x01\xc2\x4d\xd1\xeb\xe6\xe5\x59\x59\x4e\x50\x73\x34\x6c\x5b\xe3\xc0\x64\xf6\xbd\xf8\x81\x3b\x7d\xe5\x81\xb1\x15\xb5\xe0\x08\x00\x70\x74\x08\xac\xa3\x1e\x78\xaa\x01\xc6\x98\xa4\x0a\x29\x04\x90\xbf\xc7\x6c\xb6\xbc\x8c\xb3\xa7\x66\xcb\x2d\xc6\xc7\x38\xca\xf5\x49\x79\x4d\xbb\x28\xd9\x7e\x13\x80\x33\xd5\x12\x18\x0d\x1a\x0e\xbc\x39\x77\x04\x4d\x0a\x6e\xcc\xf6\x1c\xd4\xb7\x02\x4c\x35\x9d\xd9\xe6\x4b\xde\xa1\xf9\x87\x63\xea\xc9\xa5\x14\x19\xa7\x63\x53\x66\x35\x4f\xd0\x92\x35\xd1\x44\x5a\xac\xad\x09\xec\xc1\x5d\xc5\xfe\x89\x63\x88\x8c\x71\x26\x90\xf7\x16\x6d\x8f\x07\xaa\xae\xa8\x1d\x85\x42\x52\x94\xae\x24\x94\x65\x6a\x0c\xfd\xf4\x69\xf2\x8f\xf2\xbd\xa1\xed\x44\xbd\xc8\x6a\x2a\x71\x76\xc2\x51\x14\xd9\x57\x25\x6f\xc0\x99\xfa\x06\xe0\xf7\xd0\x54\xc2\xd6\xdf\x9f\xc2\x99\x7e\x1b\x54\x2f\x2a\x8b\xf9\x84\x51\x1a\xa3\x61\x78\x8f\xde\x1c\x46\x63\xff\xfa\x91\x3a\x24\x09\x45\xa3\x6d\xbf\x67\x07\x18\x2b\x7c\x61\x43\xd5\xb3\x6b\x18\x07\x70\x8d\xc8\xcc\xea\xbc\xe8\x92\xd9\x69\xd9\xb0\xba\x28\xde\x86\xd3\x4c\xda\xc2\xab\xe9\x16\x0e\x76\x09\x0d\x65\x0a\x41\xaa\x1a\x2d\x6f\x95\x25\x84\xb3\x7f\x62\xd3\xe4\xa5\x56\xae\x2b\xdb\x04\x74\x4e\x43\xf2\x09\x33\xfb\xee\x5c\xa3\xcc\x71\x8d\x42\x89\x8d\xd2\xba\xc6\x90\xb5\x37\xc9\x8d\xaf\xd4\xd0\x79\x2a\x6e\x48\x24\xd4\x07\x6e\x99\x7c\x41\x0a\x43\xbd\x5c\x0b\x89\x6c\xe4\x0d\x50\x5b\xba\x73\xf1\x18\x34\x7a\xed\x8a\xc9\xdc\xd0\xd6\xce\x8d\xc2\xd7\x4e\x8c\x61\xb8\x2c\x8f\xe6\x0c\x7a\xed\x3f\x82\x5b\x4a\xf8\x12\x8f\x25\xd0\x92\xa5\x48\x81\x44\x9a\xad\xf1\x5f\x20\xc8\x1f\xa0\xe4\xaf\x66\xd1\xf8\x61\xa9\x3c\xeb\xa6\x07\xfc\x9a\xd5\x4a\xb7\xff\x6e\xce\x1b\xf8\x56\xc3\x6f\xc0\x39\x2b\xc8\xb3\x9e\x78\x04\x78\x74\xb4\x9f\x3f\xf7\xb6\xab\xed\x1c\xe7\x14\x53\xed\x56\xef\x63\x5a\xde\x4a\x27\x71\xd3\x99\x6a\xfb\x9d\x83\xe1\xb9\xc2\x60\x11\xe4\xd3\x87\x25\xdd\xee\xf0\x22\x13\xc5\x42\xe1\xd1\xa5\x0b\x6a\xc5\x49\x75\x31\x2b\x2b\x11\xd8\xed\x3f\x07\xf1\x7d\xf8\xa8\x89\xd4\x40\xe0\xe7\x7b\xc8\x52\x4a\xb4\xc9\x5e\x02\x4c\x7e\xb4\x59\xac\xfa\x5e\x24\x24\x52\xc1\x42\xc8\x47\x22\x29\x64\x5c\xb3\xd8\xac\x6f\x6c\x67\xb1\x2c\xfd\x14\xea\x7b\x13\xc5\xd6\x24\x6e\x9e\x5c\x02\x5f\x37\x1b\x5e\xdd\xe4\x8d\x96\x87\x24\x5a\x9d\x02\xda\x8c\x55\xd1\x0d\xe0\xbd\xbd\x02\x34\x5f\x37\xf5\x8a\xa9\x96\x47\xb4\x96\xcd\xc6\x81\x33\x34\x5a\xc6\xae\x9d\xda\x95\xac\xda\x3e\x3d\x38\x56\x2f\xe1\xd8\x17\xd3\x55\x21\x50\x82\x47\x4a\x35\x73\xbf\x6a\x5c\xd6\x70\x1f\xba\x55\xe3\x4f\x8d\xca\x50\xfb\xe3\xbd\x97\x23\x38\xcb\xc9\x01\xea\x86\x39\x65\x8d\x13\xf2\x84\xd2\x1b\x73\x7e\x9a\xce\x99\x93\x7e\xec\x1d\xad\x4a\xd9\x79\xbc\x7e\x51\xcb\x8c\x53\x7c\x7a\x4e\xc5\x8c\x36\x5a\x9e\xca\xc2\xbc\x6d\xd1\x1c\x54\x17\xb0\x12\xcc\x3a\xef\x71\x2a\x38\x29\x28\x0c\x89\xc3\xa2\xc2\x3d\x2a\x42\x5e\xc8\x1a\x05\xc9\x5c\xaa\xdd\xa5\x51\x78\xbb\x55\x75\x26\xef\x94\x29\xae\x98\x5a\x01\x81\x47\x0c\x95\x6d\x2b\x40\xe1\xef\xb6\x93\x93\x77\x6c\xde\x7e\xb8\xaf\x75\x6d\xaa\x13\xd1\xb4\xd8\xab\x4f\xb9\xce\xb5\x4c\xce\x7e\x3b\xf6\x59\x79\x55\x23\x25\x12\x89\xdf\xf1\x49\xca\xbc\xcf\xea\x27\xc1\x63\x41\x68\x70\xd2\xd1\xfb\x31\x2f\x0b\x03\x7c\x4a\x63\x16\x31\xed\x58\xa1\x88\xda\xf0\x08\x28\x2e\x50\xce\x6a\x4c\x14\x0d\x99\xa9\x9f\x7f\xfb\x34\xf5\xf3\x0f\x3a\xff\x37\x00\x00\xff\xff\x9e\xad\x18\xb9\xe1\x29\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x9f, 0x7a, 0x51, 0x16, 0x30, 0x5c, 0xd0, 0xef, 0xb1, 0xd6, 0xf2, 0xd6, 0xea, 0xe6, 0x6d, 0xd, 0xca, 0x7f, 0x57, 0x5b, 0xb7, 0x2c, 0xab, 0xe8, 0xca, 0x73, 0xa2, 0x0, 0xc9, 0xa9, 0x75}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
