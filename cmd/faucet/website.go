// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.199kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\xed\x92\xdb\x36\x92\xbf\xc7\x4f\xd1\xe1\xda\x2b\xe9\x3c\x24\x35\x33\x49\xd6\x25\x89\x4a\xd9\xde\xdc\x9e\xaf\xee\x9c\x54\xec\xd4\xde\x56\x36\x75\x05\x92\x2d\x11\x1e\x10\x60\x00\x50\x1a\x65\x4a\xef\x7e\xd5\x00\x49\x91\x92\x66\x6c\xaf\x73\xfe\x31\x26\x81\x46\x7f\x7f\xa1\xc5\xc5\x57\x7f\xfd\xe1\xf5\xfb\x7f\xfc\xf8\x3d\x14\xb6\x14\xcb\x27\x0b\xfa\x0f\x04\x93\xeb\x24\x40\x19\x2c\x9f\x5c\x2c\x0a\x64\xf9\xf2\xc9\xc5\xc5\xa2\x44\xcb\x20\x2b\x98\x36\x68\x93\xa0\xb6\xab\xf0\x45\x70\xd8\x28\xac\xad\x42\xfc\xad\xe6\x9b\x24\xf8\x9f\xf0\xe7\x97\xe1\x6b\x55\x56\xcc\xf2\x54\x60\x00\x99\x92\x16\xa5\x4d\x82\x37\xdf\x27\x98\xaf\xb1\x77\x4e\xb2\x12\x93\x60\xc3\x71\x5b\x29\x6d\x7b\xa0\x5b\x9e\xdb\x22\xc9\x71\xc3\x33\x0c\xdd\xcb\x25\x70\xc9\x2d\x67\x22\x34\x19\x13\x98\x5c\x05\xcb\x27\x84\xc7\x72\x2b\x70\x79\x7f\x1f\xbd\x45\xbb\x55\xfa\x76\xbf\x9f\xc1\xcb\xda\x16\x28\x2d\xcf\x98\xc5\x1c\xfe\x9d\xd5\x19\xda\x45\xec\x21\xdd\x21\xc1\xe5\x2d\x14\x1a\x57\x49\x40\xac\x9b\x59\x1c\x67\xb9\xfc\x60\xa2\x4c\xa8\x3a\x5f\x09\xa6\x31\xca\x54\x19\xb3\x0f\xec\x2e\x16\x3c\x35\xb1\xdd\x72\x6b\x51\x87\xa9\x52\xd6\x58\xcd\xaa\xf8\x26\xba\x89\xfe\x12\x67\xc6\xc4\xdd\x5a\x54\x72\x19\x65\xc6\x04\xa0\x51\x24\x81\xb1\x3b\x81\xa6\x40\xb4\x01\xc4\xcb\x7f\x8d\xee\x4a\x49\x1b\xb2\x2d\x1a\x55\x62\xfc\x75\xf4\x97\x68\xea\x48\xf6\x97\x1f\xa7\x4a\x64\x4d\xa6\x79\x65\xc1\xe8\xec\x93\xe9\x7e\xf8\xad\x46\xbd\x8b\x6f\xa2\xab\xe8\xaa\x79\x71\x74\x3e\x98\x60\xb9\x88\x3d\xc2\xe5\x17\xe1\x0e\xa5\xb2\xbb\xf8\x3a\xfa\x3a\xba\x8a\x2b\x96\xdd\xb2\x35\xe6\x2d\x25\xda\x8a\xda\xc5\x3f\x8c\xee\x43\x36\xfc\x70\x6c\xc2\x3f\x82\x58\xa9\x4a\x94\x36\xfa\x60\xe2\xeb\xe8\xea\x45\x34\x6d\x17\x4e\xf1\x3b\x02\x64\x34\x22\x75\x11\x6d\x50\x93\xe7\x8a\x30\x43\x69\x51\xc3\x3d\xad\x5e\x94\x5c\x86\x05\xf2\x75\x61\x67\x70\x35\x9d\x3e\x9b\x9f\x5b\xdd\x14\x7e\x39\xe7\xa6\x12\x6c\x37\x83\x95\xc0\x3b\xbf\xc4\x04\x5f\xcb\x90\x5b\x2c\xcd\x0c\x3c\x66\xb7\xb1\x77\x34\x2b\xad\xd6\x1a\x8d\x69\x88\x55\xca\x70\xcb\x95\x9c\x91\x47\x31\xcb\x37\x78\x0e\xd6\x54\x4c\x9e\x1c\x60\xa9\x51\xa2\xb6\x78\xc4\x48\x2a\x54\x76\xeb\xd7\x5c\x34\xf7\x85\xc8\x94\x50\x7a\x06\xdb\x82\x37\xc7\xc0\x11\x82\x4a\x63\x83\x1e\x2a\x96\xe7\x5c\xae\x67\xf0\x6d\xd5\xc8\x03\x25\xd3\x6b\x2e\x67\x30\x3d\x1c\x59\xc4\xad\x1a\x17\xb1\x4f\x5c\x4f\x2e\x16\xa9\xca\x77\xce\x86\x39\xdf\x40\x26\x98\x31\x49\x70\xa4\x62\x97\x90\x06\x00\x94\x87\x18\x97\xed\xd6\x60\x4f\xab\x6d\x00\x8e\x50\x12\x78\x26\xc2\x54\x59\xab\xca\x19\x5c\x11\x7b\xcd\x91\x23\x7c\x22\x14\xeb\xf0\xea\xba\xdd\xbc\x58\x14\x57\x2d\x12\x8b\x77\x36\x74\xf6\xe9\x2c\x13\x2c\x17\xbc\x3d\xbb\x62\xb0\x62\x61\xca\x6c\x11\x00\xd3\x9c\x85\x05\xcf\x73\x94\x49\x60\x75\x8d\xe4\x47\x7c\x09\xfd\xf4\xf7\x40\xf6\x2b\xae\x5a\xbe\xe2\x9c\x6f\x1a\xb1\x7a\x8f\x47\x12\x3e\x2c\xc4\x0b\x68\x1e\xd4\x6a\x65\xd0\x86\x3d\x99\x7a\xc0\x5c\x56\xb5\x0d\xd7\x5a\xd5\x55\xb7\x7f\xb1\x70\xab\xc0\xf3\x24\xa8\xb5\x08\x9a\xf4\xef\x1e\xed\xae\x6a\x54\x11\x74\x82\x2b\x5d\x86\x64\x09\xad\x44\x00\x95\x60\x19\x16\x4a\xe4\xa8\x93\xe0\x9d\xca\x38\x13\x20\xbd\xcc\xf0\xf3\x4f\xff\x05\x8d\xc9\xb8\x5c\xc3\x4e\xd5\x1a\x5e\x71\xc9\x64\x86\xf0\xae\x64\xda\xc2\xeb\x82\x71\x09\x2c\xcf\xc9\x73\xa3\x28\xea\xf1\xe4\xdc\xf8\x94\xeb\x30\xb5\xf2\x00\x75\xb1\x48\x6b\x6b\x55\x07\x98\x5a\x09\xa9\x95\x61\x8e\x2b\x56\x0b\x0b\xb9\x56\x55\xae\xb6\x32\xb4\x6a\xbd\xa6\xa2\xe7\xe5\xf1\x87\x02\xc8\x99\x65\xcd\x56\x12\xb4\xb0\xad\x39\x99\xa9\x54\x55\x57\x8d\x41\xfd\x22\xde\x55\x4c\xe6\x98\x93\xf9\x85\xc1\x60\xf9\x37\xbe\x41\x28\x11\x5e\xbd\x7d\x75\x71\xec\x1b\x19\xd3\x68\xc3\x3e\xca\x13\x0f\x59\xc4\x9e\x15\x2f\x10\x34\xff\x16\xb5\x68\x31\x75\x02\x94\x28\x6b\x18\xbc\x85\x9a\x12\x4c\xb0\xbc\xbf\xd7\x4c\xae\x11\x9e\xf2\xfc\xee\x12\x9e\xb2\x52\xd5\xd2\xc2\x2c\x81\xe8\xa5\x7b\x34\xfb\xfd\x00\x3b\xc0\x42\xf0\xe5\x82\x3d\xe6\xe7\xa0\x64\x26\x78\x76\x9b\x04\x96\xa3\x4e\xee\xef\x09\xf9\x7e\x3f\x87\xfb\x7b\xbe\x82\xa7\xd1\x4f\x98\xb1\xca\x66\x05\xdb\xef\xd7\xba\x7d\x8e\xf0\x0e\xb3\xda\xe2\x78\x72\x7f\x8f\xc2\xe0\x7e\x6f\xea\xb4\xe4\x76\xdc\x1e\xa7\x75\x99\xef\xf7\xc4\x73\xc3\xe7\x7e\x0f\x31\x21\x95\x39\xde\xc1\xd3\xe8\x47\xd4\x5c\xe5\x06\x3c\xfc\x22\x66\xcb\x45\x2c\xf8\xb2\x39\x37\x54\x52\x5c\x8b\x83\xb7\xc4\xe4\x2e\x9d\xc3\xbb\xf8\x71\xac\xf6\x39\x3d\x13\x0e\xeb\xb0\xe3\xbe\xf1\x06\xc3\x2d\xde\xe2\x2e\x09\xee\xef\xfb\x67\x9b\xdd\x8c\x09\x91\x32\xd2\x8b\x17\xad\x3b\xf4\x3b\x92\x97\x6e\xb8\x71\xbd\xd5\xb2\xe5\xe0\xc0\xf6\x27\xc6\xf7\x51\x06\xb3\xaa\x9a\xc1\xcd\x75\x2f\x7d\x9d\x0b\xfd\x6f\x8f\x42\xff\xe6\x2c\x70\xc5\x24\x0a\x70\x7f\x43\x53\x32\xd1\x3e\x37\xb1\xd2\x0b\xbd\xe3\x43\x21\x25\xeb\x8e\xb5\x2e\xe9\x4f\xe7\xa0\x36\xa8\x57\x42\x6d\x67\xc0\x6a\xab\xe6\x50\xb2\xbb\xae\xf0\xdd\x4c\xa7\x7d\xbe\xa9\x27\x64\xa9\x40\x97\x66\x34\xfe\x56\xa3\xb1\xa6\x4b\x2a\x7e\xcb\xfd\xa5\xdc\x92\xa3\x34\x98\x1f\x69\x83\x28\x92\x6a\x1d\x54\xcf\xf4\x9d\x32\xcf\xf2\xbe\x52\xaa\xab\x25\x7d\x36\x1a\xd4\xbd\xb2\x17\x2c\x17\x56\x1f\xe0\x2e\x16\x36\xff\xac\x5a\xa0\xa9\xd7\x7b\xa8\x14\xf8\x7c\x46\xb2\x57\x88\xda\x37\x1a\xe4\xb2\xe0\x5e\x17\xb1\xcd\xbf\x80\x32\x39\x61\xca\x0c\x7e\x0a\x79\x57\xf2\x0f\xe4\xdd\xeb\x97\xd2\x2f\x90\x69\x9b\x22\xb3\x9f\xc2\xc0\xaa\x96\x79\x4f\xfe\x57\x6f\x5f\x7d\x29\xf9\x5a\xf2\x0d\x6a\xc3\xed\xee\x53\xe9\x63\x7e\x60\xc0\xbf\x0f\x59\x58\xc4\x56\x3f\xee\x69\xfd\x97\x3f\x28\xb4\x3f\xd6\x99\xdc\x2c\xff\x43\x6d\x21\x57\x68\xc0\x16\xdc\x00\xd5\xd8\xef\x16\x71\x71\xd3\x81\x54\xcb\xf7\xb4\xb1\x72\xbd\x05\x70\x03\xba\x96\xae\xf4\x2a\x09\xb6\xc0\x61\x3f\xd2\x54\xe9\x08\xde\x2b\xea\xe9\x36\x28\x2d\x94\x4c\xf0\x8c\xab\xda\x00\xcb\xac\xd2\x06\x56\x5a\x95\x80\x77\x05\xab\x8d\x25\x44\x94\x36\xd8\x86\x71\xe1\x62\xc8\x99\x12\x94\x06\x96\x65\x75\x59\x53\x4f\x2a\xd7\x80\x52\xd5\xeb\x82\x0c\x0b\x56\x81\x2f\x47\x42\xc9\x75\xc7\x8d\xa9\x58\x09\xcc\x5a\x96\xdd\x9a\x4b\x68\x73\x01\x30\x8d\x60\x39\xe6\x74\x2a\x53\x65\xa9\x24\xdc\xe8\x1c\x2a\xa6\xed\x0e\xcc\xb0\xb5\x60\x59\xe6\x6a\x5b\x04\x2f\xe5\x4e\x49\x84\x82\x6d\x1c\x7f\xf0\xde\xdf\x26\x5a\x08\x28\xd9\xae\x25\xd1\xf0\xbb\xe5\xb6\xe0\x5e\x21\x15\xea\x92\xc0\x73\x10\xbc\xe4\xd6\x44\x8b\xb8\x3a\xe4\xce\x43\x15\x16\x61\xa1\x34\xff\x9d\x7a\x19\xd1\x4f\x94\xf6\x28\x8d\xb4\x59\xd0\x59\x58\xe0\xca\xce\xe0\x6b\x9f\x05\x8f\x7d\xb6\xb9\xf4\x9c\x73\xd8\x16\xa7\xbb\x4c\x52\x69\x99\xc1\x8d\xef\x60\x7d\xcb\x90\xdb\x1e\x07\xf9\x91\x5b\x79\xa2\x2f\x5e\x54\x77\x1d\x1f\x5d\x1b\x3c\xed\x90\x90\xcd\x87\x4a\xd9\xf0\x4e\x75\x97\x50\xb2\x5b\x04\x06\x0b\x76\x74\x29\x6e\x98\x76\x57\x2a\xee\x46\x02\xb1\xdd\x22\xda\xef\x28\x4c\x93\x9f\x3c\x42\x2e\xd7\xcf\xae\xa7\xde\x07\xe9\x81\xd0\x3f\xbb\x9e\x72\x69\xd5\xb3\xeb\xe9\xf4\x6e\xfa\x89\xff\x9e\x5d\x4f\x95\x7c\x76\x3d\xb5\x05\x3e\xbb\x9e\x3e\xbb\xbe\xe9\x7b\xaf\x5f\xa1\x5d\x34\x44\xa5\x75\xe6\x00\x2c\xd3\x6b\xb4\x49\xf0\xbf\x2c\x55\xb5\x9d\xa5\x82\xc9\xdb\x60\xe9\xd8\xa4\x7e\xc2\x59\xff\xa3\xad\x28\x54\xcc\x90\x57\x10\xd3\xce\x51\x9a\x09\x88\x81\xb1\xa9\xb5\x56\xb5\xa4\x12\x08\x24\xb6\x0b\x48\x39\x22\x47\x23\xdd\x4c\xa2\x45\xaa\xe3\xe5\x6b\x55\xed\x42\x87\xc4\x1d\x3f\xd1\xa4\xa9\xab\x4a\x69\x1b\xf5\x35\xca\xe8\xf6\x23\xd0\xc4\x2f\xa6\xdf\xbc\xf8\xf6\x51\x49\x0c\xf5\xd6\x4e\x9c\x8e\x43\x96\xaa\x0d\x82\xef\xe4\x53\x75\x07\x4c\xe6\xb0\xe2\x1a\x81\x6d\xd9\xee\xab\x45\x9c\xbb\x7b\x97\xff\xe7\x5b\xa3\xb7\x8a\xae\x24\x5d\x5f\xe4\xfd\xb9\xad\xc7\x94\x77\x73\xea\x2b\x75\xf0\x2f\xfb\x78\x2d\xa9\xb8\x84\x4c\x9c\xad\x0b\x9f\xe1\xe6\xce\xcf\x1f\xe1\xec\x0b\x7d\x7f\x61\xac\x56\x72\xbd\x24\xd7\x50\xb5\x25\x09\xdb\x9b\x1a\x57\x92\xae\xaf\x6e\xfb\x12\x0c\x2f\x2b\xb1\x83\xec\x60\xdc\x8f\x3a\xd2\x83\xf6\xf9\xa8\x23\x0d\x2d\xe8\xdd\xca\xa5\xf7\x52\xe5\x48\xc9\xdd\xd4\x26\xc3\xca\x4d\xf3\x28\x65\xbe\xda\xfd\xce\xa4\xe5\x12\xdb\xd4\x1a\xc1\x0f\x52\xec\xa0\x36\x08\x2b\xa5\x21\xc7\xb4\x5e\xaf\x5d\x35\xd0\x50\x69\xbe\x61\x16\xdb\x7c\x6a\x1a\x07\xe9\xfc\xa3\xd7\xb8\x52\x4d\x13\xbd\x12\xf3\x0f\x55\x43\xc6\x24\x58\xcd\xb2\x5b\x1f\x1c\xb5\xd6\x54\x3d\x2a\xf4\xd2\x74\x19\x3d\x45\xa1\xb6\x0e\xc4\xcb\xbd\xe2\x28\x5c\x7a\x37\x88\x50\xa8\x2d\x94\x75\xe6\x82\x91\xd2\xb7\x13\x62\xcb\xb8\x85\x5a\x5a\x2e\xbc\x6a\x6d\xad\x25\x15\x03\x6c\x52\x73\xaf\x18\xfe\x9d\x49\x4b\x47\xac\x66\xd2\xac\x50\x3b\x1d\x34\x96\x70\x36\x38\xae\x8d\x83\x4d\xa7\xdd\x73\x86\x33\x85\xab\x43\x05\x82\x61\x25\xf1\x74\x8b\x12\x9a\x0e\xc3\x2b\x92\x0a\x9b\x3b\xfd\xfd\x8f\xd7\x7e\xdf\x5c\xc2\x4a\x89\x56\x56\x63\xb1\x32\x47\x9c\x11\x90\x2f\xa6\xaf\xde\xbd\x76\x9c\xbe\x9e\xf5\x6b\x4d\xb5\x7c\x67\xb1\x82\xab\x19\x64\x1a\xc9\x30\x4c\x76\x15\x4c\xc9\x43\xfe\x08\x8e\xa4\xa0\xf4\x27\x7d\x66\x8b\xce\xe0\xbb\x9e\xc1\xcf\xe6\x4c\xfa\xc9\x55\x66\xa2\xd4\x63\x8a\x94\x5e\xc7\x86\x34\x10\x66\x84\x33\xde\x32\x21\xd0\xc6\x25\xb3\x45\x54\xd8\x52\xfc\xa9\x95\x23\x4c\x65\x1a\x92\x10\x61\x6a\xb2\xd0\xaa\x30\xcd\x20\x58\x12\x1c\xf8\x33\x2e\x23\xf5\x05\x1f\x4a\x3c\x30\xe1\xc9\xf5\x6c\x81\xe5\xf2\x7d\x81\x67\xba\x97\xee\x62\x05\x1a\x5f\x7b\x70\xa8\xb4\xb2\x98\x51\x7c\x02\x5b\x33\x2e\x0d\x45\x95\x2b\xe0\x58\x7e\xc2\xc5\xab\x7b\x6a\x1e\x0e\xd3\x44\xb7\x1d\xc7\xf0\x37\xa1\x52\x26\x60\x43\x89\x2b\x15\xe8\x0c\x5a\x28\x72\xdf\x9e\xc7\x1b\xcb\x6c\x6d\x40\xad\xdc\xaa\xe7\x9c\xce\x6f\x98\xa6\x28\xc4\xb2\xb2\x90\x34\xb3\x30\x5a\x33\xa8\x37\xcd\x84\x8f\x5e\xe9\x72\x3d\xd8\xef\x22\x27\x81\x5f\x7e\x9d\x3f\x69\x58\xf9\x2b\xae\x5c\x58\x53\xba\xf2\x22\xdb\x82\xd9\xc6\x53\x0c\x64\x42\x99\x5a\x7b\x0e\x73\xad\x2a\x20\x2e\x5b\x4c\x2d\x66\xda\xa8\x1c\xb5\x16\xc9\xb8\x60\xa6\x98\x34\xa3\x3c\x8d\x2e\xd2\xba\xbd\x76\xfd\x82\x1c\x7e\x4c\x08\x78\x32\x9d\x03\x5f\xb4\x78\x23\x81\x72\x6d\x8b\x39\xf0\xe7\xcf\x3b\xe0\x0b\xbe\x82\x71\x0b\xf1\x0b\xff\x35\xb2\x77\x11\x51\x81\x24\x81\x3e\x35\x47\xb0\xc1\x63\x2a\xc1\x33\x1c\xf3\x4b\xb8\x9a\xcc\xdb\xdd\x54\x23\xbb\x6d\xdf\x1a\x3b\xfa\xff\xdc\xdf\xfd\x7c\xa8\x19\xa7\xfc\x81\x6e\xfc\xf5\xdc\x00\x83\x35\x37\x16\x6a\x2d\xa0\xc9\xc3\xde\x04\x9d\x41\x1c\x5c\x5f\x2b\x27\x7e\xd9\x3c\x34\x3e\xd5\x8a\xe0\xd1\x44\x06\x65\x3e\xfe\xcf\x77\x3f\xbc\x8d\x8c\xd5\x5c\xae\xf9\x6a\x37\xbe\xaf\xb5\x98\xc1\xd3\x71\xf0\xa7\x5a\x8b\x60\xf2\xcb\xf4\xd7\x68\xc3\x44\x8d\x97\xce\xde\x33\xf7\xf7\x84\xca\x25\x34\x8f\x33\x18\x12\xdc\x4f\x26\xf3\xf3\xa3\x8c\xde\xe4\x45\xa3\x41\x3b\x26\xc0\xce\xf1\x8f\x75\xc4\xa0\x44\x5b\x28\x97\x7e\x35\x66\x4a\x4a\xcc\x2c\xd4\x95\x92\x8d\x4a\x40\x28\x63\x0e\x8e\xd8\x42\x24\xa7\x4e\xd1\xc0\x27\x20\x71\x0b\x7f\xc7\xf4\x9d\xca\x6e\xd1\x8e\xc7\xe3\x2d\x97\xb9\xda\x46\x42\xf9\xca\x19\x51\x90\xaa\x4c\x09\x48\x92\x04\x9a\xe4\x13\x4c\xe0\x3b\x08\xb6\x86\xd2\x50\x00\x33\x7a\xa4\xa7\x09\x3c\x87\xe3\xe3\x85\x32\x16\x9e\x43\x10\xfb\xc0\x0a\x5d\x92\x8a\x59\xc5\x83\x89\x8f\x8d\xd6\x0a\x4a\x96\x68\x0c\x5b\x63\x9f\x5b\x77\xa3\xe9\x3c\x8e\x84\x2a\xcd\x1a\x12\x70\xd6\xaa\x98\x36\xe8\x41\x22\xba\x3d\xb7\xae\x47\x0e\xec\xc0\x92\x04\x64\x2d\xc4\xc1\x63\x7d\x84\xcc\x5b\x5f\x1c\x80\x47\xbe\x8f\xf8\x2a\x49\x80\x2e\x93\xa4\xef\xfc\x70\x92\x3c\xc1\x5f\x7a\x27\x11\x15\xfa\xc3\x89\xc9\xbc\xef\xda\x03\x6c\x98\x7f\x0c\x1d\xe6\xc7\xf8\x30\x7f\x00\xa1\x9b\x31\x3c\x86\xcf\xcf\x24\x7a\xe8\xdc\xc2\x03\xd8\x64\x5d\xa6\xa8\x1f\x43\xe7\x67\x0c\x0d\x3a\xa7\xea\x37\xd2\xf6\xce\x5e\xc2\xd5\xb7\x93\x07\xb0\xa3\xd6\xea\x41\xe4\x52\xd9\xdd\xf8\x5e\xb0\x1d\x35\xc4\x30\xb2\xaa\x7a\xed\x86\x02\xa3\x4b\xd7\x42\xcd\xa0\xc3\x70\xe9\x46\xbd\x33\x18\xb9\x37\xda\xe7\x25\xba\x53\xdf\x4c\xa7\xd3\x4b\x68\x7f\x2e\x79\xc5\x28\x22\x75\x8d\xfb\x07\xf8\x31\x75\x96\x51\x23\xf7\x25\x1c\x35\x38\x3a\x9e\x9a\xf7\x2f\xe0\xaa\x2b\x14\x03\xb6\xe0\xcf\x7f\x86\x93\xdd\xa1\x1b\xc7\x31\xfc\x37\xa3\x0b\xb4\x10\xee\xd6\xef\x2e\xfb\x1d\x7c\xc9\x8d\x71\xd7\x68\x03\xb9\x92\xd8\x9c\xf9\xbc\x1a\x70\xc2\x63\x03\x06\x4b\x98\x1e\x33\x48\xb9\xb1\x57\x23\xce\x94\x8e\x1e\xde\x61\x55\xb8\xd8\xf7\xe9\x0d\x4e\xf2\x12\xe1\xab\x04\x82\xa0\x7f\xf8\x04\x82\x00\x3a\x64\x17\x06\xed\x7b\x6f\x8b\x71\x53\x2a\xcf\x15\xb2\xc9\x25\xdc\x4c\xa7\xd3\xc9\x09\x13\xfb\x83\x7a\x5f\x56\xd4\x07\x03\x93\x3b\x97\x1f\x3b\xdd\xba\x9b\x00\xf5\xb4\x94\xdf\x04\x64\x4a\x08\xdf\xc0\x34\x47\x49\xc1\xcd\xd8\x23\x81\xf0\x6a\x7e\xa6\xa4\xf6\x34\xd9\x13\xed\xd8\x3c\x67\x74\x7f\x6c\xa2\xa1\xce\x8e\x80\xc3\xab\x81\x51\x06\xf6\x3a\x6f\x98\x8b\x8e\x6f\x7e\xd0\xe8\x91\xb9\x0e\xf6\x3a\xd6\x59\x8f\x7f\x8f\xe7\xf9\xd5\x27\x8a\xd1\x6d\x57\xb5\x29\xc6\x47\x8c\x4e\xe6\xa7\xb6\x79\x63\x51\x53\x77\xad\xa8\x7e\x91\x2d\xe8\x9a\xa7\xf1\xc4\x24\xae\xbf\xd7\x18\x6a\x94\x39\xf5\xef\xbe\xbf\xf0\x57\x35\xea\x06\x07\x26\x73\x93\x81\x81\x3b\x7d\x66\xc0\xb8\xfe\x4c\x49\x04\x00\x38\x0a\x02\xe7\xa8\x03\x4f\x25\x60\x14\xac\x32\x98\x43\x02\xfe\xd7\xeb\xf1\x24\xaa\x25\xbf\x1b\x4f\xc2\xe6\xfd\x18\x47\xbb\x3f\xef\x46\x00\x2d\xdb\xcf\x13\x08\x16\x56\x03\xcf\x93\x51\x00\xcf\xcf\x85\x20\x95\xe0\xd1\xf2\xc0\x41\xff\x28\xc0\xc2\xe6\x4b\x37\xb9\xf4\x77\xf1\x7f\x06\x29\xcb\x6e\xd7\xee\x66\x3b\xa3\xbe\x6b\x7c\x82\x96\x6d\x98\x65\xda\x61\x9d\xcc\xe1\x00\xde\x0c\x01\x32\x32\xce\x1c\xfc\xb4\xc1\x0d\x48\xa1\xfb\x49\xc1\xbd\xa5\x4a\xe7\xa8\x43\xcd\x72\x5e\x9b\x19\x7c\x5d\xdd\xcd\xff\xd9\xfe\xe4\xe2\xc6\xb8\x8f\xb2\x5a\x69\x5c\x9e\x70\xd4\xdc\xb4\x9e\x43\xb0\x88\x09\xe0\x63\x68\x3a\x61\xfb\xbf\x9a\xc3\x99\x61\x35\x74\xbf\x69\x37\xeb\x25\xcf\x73\x81\xc4\xf0\x01\x3d\x05\x23\xd9\xbf\x1f\x52\x43\x92\xd0\x4c\xa9\x0f\x67\xf6\x80\xc2\xe0\x23\x07\xba\x81\xf7\x88\x1c\x20\x24\x91\xb9\xd3\x79\x33\x48\x71\xcb\x7a\xe4\x74\xd1\x7c\x03\x91\xd7\xda\x35\x5e\xe3\xb0\x71\xb0\x4b\x18\x19\x6a\x04\x73\x33\x9a\x44\x45\x5d\x32\xc9\x7f\xc7\x31\xd5\xa5\x89\xd7\x95\x9b\xa0\x07\xa7\x29\xf9\x84\x99\xc3\x68\x7b\xd4\xd6\xb8\x51\xa3\xc4\x51\x6b\xdd\xaf\x0f\x73\x9b\x19\x4c\xe7\xa3\xcf\xd4\xd0\x79\x2a\x61\xca\x34\xf4\x5f\xc2\xb6\xf8\x82\x56\x44\xbd\xdd\x4b\x99\x1e\xf9\x29\x95\x6b\xd6\xa5\xda\x26\xa3\x9b\x69\xc7\xa4\x37\xb4\xb3\xf3\xa8\xf1\xb5\x13\x63\x10\x97\x6d\x68\x2e\xe1\x66\xfa\x47\x70\xeb\x27\x5d\x47\x12\x58\xcd\x2b\xcc\x81\x65\x96\x6f\xf0\xff\x41\x90\x3f\x40\xc9\x9f\xcd\x22\xf9\x61\xab\x3c\xe7\xa6\x03\x7e\x69\xb7\xd3\xed\xbf\x51\xbc\x41\xec\x34\xfc\x1c\x82\xb3\x82\x3c\xe8\x89\x47\x80\x47\xa1\xfd\x70\xdc\xbb\x9f\x84\x82\xe3\x9a\x42\xdd\x6e\xf7\x63\xe6\xc4\x8d\x4b\xc6\xc1\xc2\xba\xaf\x5b\x88\xe7\x0e\x83\x43\xe0\x97\x87\x2d\xdd\x7e\x78\x91\xa1\xcb\x3c\x1e\x5d\xba\xa0\xd7\x9c\x74\x17\xb3\xb6\x13\x81\xfd\xe1\x23\xa0\x38\x86\x77\x96\x69\x0b\x0c\x7e\x7e\x03\x75\x95\x33\xeb\xe7\x62\x54\x1f\xfd\x0f\x1e\xed\x57\x42\x29\xd3\x06\x56\x4a\x6f\x99\xce\x9b\x81\x9b\x2d\x70\xe7\x7e\x84\x69\x5b\x3f\x83\xf6\x0d\x65\xb1\x0d\x13\xe3\x93\x4b\xe0\xd3\xf1\x28\xea\x9b\x7c\x34\x89\x90\x65\xc5\x29\xa0\xab\x58\x1d\xdd\x04\xde\xba\x2b\xc0\xf8\xe9\xd8\x16\xdc\x4c\x22\x66\xad\x1e\x8f\x06\xce\x30\x9a\x90\x5d\xaf\x7a\x57\xb2\xee\xf8\x62\x10\x56\x8f\xe1\x38\x34\xd3\x5d\x23\xd0\x82\x67\xc6\x8c\xbd\x5f\x8d\x2e\x7b\xb8\x87\x6e\x35\x7a\x36\xea\x0c\x75\x08\xef\x83\x1c\xc9\x59\x4e\x06\xa8\x47\x14\x65\xa3\x13\xf2\x2c\xcf\x5f\x53\xfc\x8c\x83\x33\x91\x7e\xec\x1d\x93\x4e\xd9\x3e\x5f\x3f\xaa\x65\xff\x19\xc5\x03\x2a\xe6\xf9\x68\x12\x99\x3a\xf5\x83\x8a\xf1\x37\xdd\x05\xac\x05\x73\xce\x7b\x5c\x0a\x4e\x1a\x0a\x22\x31\x6c\x2a\xc2\xa3\x26\xe4\x91\xaa\xd1\x90\xf4\x52\xed\x2f\x49\xe1\xd3\x49\x37\xe7\xfa\xde\x50\x73\xc5\x4d\x01\x0c\xb6\x98\x1a\x37\x56\x80\xc6\xdf\xdd\x68\xc7\x8f\x70\x5e\xfe\xf8\xa6\x37\xc6\xe9\x22\x62\xec\xb0\x77\x1f\xf0\x9d\x1b\x9a\x9c\xfd\x62\x70\xbb\xdd\x46\x6b\xa5\xd6\xc2\x7f\x2b\xd8\x4d\x55\x62\x56\xf1\xe8\x83\x09\x80\x99\x9d\xcc\x20\xc7\x15\xea\x65\x0f\x7d\x33\x6a\x59\xc4\xfe\x5b\xb6\x45\xec\x3f\xd7\xfd\xbf\x00\x00\x00\xff\xff\x48\xd9\x6d\x6e\xbf\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x3b, 0x79, 0x43, 0x17, 0xfc, 0xa4, 0xb7, 0x27, 0x7f, 0xc6, 0xd4, 0xfe, 0x34, 0x77, 0xd3, 0x50, 0x11, 0xbc, 0xd0, 0x4d, 0xdf, 0x99, 0xbb, 0xe8, 0xc1, 0x9f, 0x5f, 0x39, 0xf4, 0x6b, 0xef}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
